{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}

module CheckerTask
  ( checkerTask
  , recordEmit
  ) where

import Types

import Ivory.Tower
import Ivory.Language

--------------------------------------------------------------------------------

-- XXX impl specific
-- Set the red LED.
led_set :: Def ('[Sint32, IBool] :-> ())
led_set = importProc "led_set" "hwf4/led.h"

-- XXX impl specific
-- What to do if a property fails (in this case, led_set(1, 1))?
action :: Ivory eff ()
action = call_ led_set 1 true

append_to_history :: Def ('[Ix 100, Uint32] :-> ())
append_to_history = importProc "append_to_history" "instrumented.h"

--------------------------------------------------------------------------------

-- | Emitter a monitored task uses to send values to the checker task.  The
-- emitter is called by record_assignment(), instrumented by the plugin.
recordEmit :: (SingI n)
           => ChannelEmitter n AssignStruct
           -> Def ('[AssignRef s] :-> ())
recordEmit ch = proc "recordEmit" $ \r -> body $ emit_ ch r

--------------------------------------------------------------------------------

-- | History buffer managed by the checker task.
mkHistory :: Def ('[AssignRef s] :-> ())
mkHistory = proc "mkHistory" $ \s -> body $ do
  var <- deref (s ~> var_id)
  val <- deref (s ~> value)
  call_ append_to_history var val

--------------------------------------------------------------------------------

-- "check_properties" is automatically generated by the RTV system and always
-- has the same type.  We just have to call it and see if it's true.
check_properties :: Def ('[] :-> IBool)
check_properties = importProc "check_properties" "runtime-checker.h"

runCheck :: Ivory s ()
runCheck = do
  bool <- call check_properties
  ifte_ bool (return ()) action

--------------------------------------------------------------------------------

-- Checker task
checkerTask :: (SingI n) => ChannelSink n AssignStruct -> Task ()
checkerTask sink = do
  -- Add dependencies
  taskModuleDef $ incl mkHistory >> incl led_set

  -- "src" string only is for graphviz output for now
  rx <- withChannelReceiver sink "rvSink"
  onChannel rx $ \latestVal -> do
     call_ mkHistory latestVal
     runCheck

--------------------------------------------------------------------------------
