{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.StateCorrection where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

stateCorrectionMsgId :: Uint8
stateCorrectionMsgId = 64

stateCorrectionCrcExtra :: Uint8
stateCorrectionCrcExtra = 130

stateCorrectionModule :: Module
stateCorrectionModule = package "mavlink_state_correction_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkStateCorrectionSender
  incl stateCorrectionUnpack
  defStruct (Proxy :: Proxy "state_correction_msg")

[ivory|
struct state_correction_msg
  { xErr :: Stored IFloat
  ; yErr :: Stored IFloat
  ; zErr :: Stored IFloat
  ; rollErr :: Stored IFloat
  ; pitchErr :: Stored IFloat
  ; yawErr :: Stored IFloat
  ; vxErr :: Stored IFloat
  ; vyErr :: Stored IFloat
  ; vzErr :: Stored IFloat
  }
|]

mkStateCorrectionSender ::
  Def ('[ ConstRef s0 (Struct "state_correction_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkStateCorrectionSender =
  proc "mavlink_state_correction_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 36 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> xErr)
  pack buf 4 =<< deref (msg ~> yErr)
  pack buf 8 =<< deref (msg ~> zErr)
  pack buf 12 =<< deref (msg ~> rollErr)
  pack buf 16 =<< deref (msg ~> pitchErr)
  pack buf 20 =<< deref (msg ~> yawErr)
  pack buf 24 =<< deref (msg ~> vxErr)
  pack buf 28 =<< deref (msg ~> vyErr)
  pack buf 32 =<< deref (msg ~> vzErr)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 36 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "stateCorrection payload of length 36 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    stateCorrectionMsgId
                    stateCorrectionCrcExtra
                    36
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "state_correction_msg" where
    unpackMsg = ( stateCorrectionUnpack , stateCorrectionMsgId )

stateCorrectionUnpack :: Def ('[ Ref s1 (Struct "state_correction_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
stateCorrectionUnpack = proc "mavlink_state_correction_unpack" $ \ msg buf -> body $ do
  store (msg ~> xErr) =<< unpack buf 0
  store (msg ~> yErr) =<< unpack buf 4
  store (msg ~> zErr) =<< unpack buf 8
  store (msg ~> rollErr) =<< unpack buf 12
  store (msg ~> pitchErr) =<< unpack buf 16
  store (msg ~> yawErr) =<< unpack buf 20
  store (msg ~> vxErr) =<< unpack buf 24
  store (msg ~> vyErr) =<< unpack buf 28
  store (msg ~> vzErr) =<< unpack buf 32

