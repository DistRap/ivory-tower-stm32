{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.StateCorrection where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

stateCorrectionMsgId :: Uint8
stateCorrectionMsgId = 64

stateCorrectionCrcExtra :: Uint8
stateCorrectionCrcExtra = 130

stateCorrectionModule :: Module
stateCorrectionModule = package "mavlink_state_correction_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkStateCorrectionSender
  incl stateCorrectionUnpack
  defStruct (Proxy :: Proxy "state_correction_msg")

[ivory|
struct state_correction_msg
  { xErr :: Stored IFloat
  ; yErr :: Stored IFloat
  ; zErr :: Stored IFloat
  ; rollErr :: Stored IFloat
  ; pitchErr :: Stored IFloat
  ; yawErr :: Stored IFloat
  ; vxErr :: Stored IFloat
  ; vyErr :: Stored IFloat
  ; vzErr :: Stored IFloat
  }
|]

mkStateCorrectionSender ::
  Def ('[ ConstRef s0 (Struct "state_correction_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 MavlinkArray -- tx buffer
        ] :-> ())
mkStateCorrectionSender =
  proc "mavlink_state_correction_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 36 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> xErr)
  call_ pack buf 4 =<< deref (msg ~> yErr)
  call_ pack buf 8 =<< deref (msg ~> zErr)
  call_ pack buf 12 =<< deref (msg ~> rollErr)
  call_ pack buf 16 =<< deref (msg ~> pitchErr)
  call_ pack buf 20 =<< deref (msg ~> yawErr)
  call_ pack buf 24 =<< deref (msg ~> vxErr)
  call_ pack buf 28 =<< deref (msg ~> vyErr)
  call_ pack buf 32 =<< deref (msg ~> vzErr)
  -- 6: header len, 2: CRC len
  if arrayLen sendArr < (6 + 36 + 2 :: Integer)
    then error "stateCorrection payload is too large for 36 sender!"
    else do -- Copy, leaving room for the payload
            _ <- arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    stateCorrectionMsgId
                    stateCorrectionCrcExtra
                    36
                    seqNum
                    sendArr
            retVoid

instance MavlinkUnpackableMsg "state_correction_msg" where
    unpackMsg = ( stateCorrectionUnpack , stateCorrectionMsgId )

stateCorrectionUnpack :: Def ('[ Ref s1 (Struct "state_correction_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
stateCorrectionUnpack = proc "mavlink_state_correction_unpack" $ \ msg buf -> body $ do
  store (msg ~> xErr) =<< call unpack buf 0
  store (msg ~> yErr) =<< call unpack buf 4
  store (msg ~> zErr) =<< call unpack buf 8
  store (msg ~> rollErr) =<< call unpack buf 12
  store (msg ~> pitchErr) =<< call unpack buf 16
  store (msg ~> yawErr) =<< call unpack buf 20
  store (msg ~> vxErr) =<< call unpack buf 24
  store (msg ~> vyErr) =<< call unpack buf 28
  store (msg ~> vzErr) =<< call unpack buf 32

