{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Data96 where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send
import qualified SMACCMPilot.Shared as S

import Ivory.Language
import Ivory.Stdlib

data96MsgId :: Uint8
data96MsgId = 172

data96CrcExtra :: Uint8
data96CrcExtra = 185

data96Module :: Module
data96Module = package "mavlink_data96_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkData96Sender
  incl data96Unpack
  defStruct (Proxy :: Proxy "data96_msg")

[ivory|
struct data96_msg
  { data96_type :: Stored Uint8
  ; len :: Stored Uint8
  ; data96 :: Array 96 (Stored Uint8)
  }
|]

mkData96Sender ::
  Def ('[ ConstRef s0 (Struct "data96_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 S.MavLinkArray -- tx buffer
        ] :-> ())
mkData96Sender =
  proc "mavlink_data96_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 98 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> data96_type)
  call_ pack buf 1 =<< deref (msg ~> len)
  arrayPack buf 2 (msg ~> data96)
  -- 6: header len, 2: CRC len
  let usedLen = 6 + 98 + 2 :: Integer
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "data96 payload of length 98 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    data96MsgId
                    data96CrcExtra
                    98
                    seqNum
                    sendArr
            let usedLenIx = fromInteger usedLen
            -- Zero out the unused portion of the array.
            for (fromInteger sendArrLen - usedLenIx) $ \ix ->
              store (sendArr ! (ix + usedLenIx)) 0
            retVoid

instance MavlinkUnpackableMsg "data96_msg" where
    unpackMsg = ( data96Unpack , data96MsgId )

data96Unpack :: Def ('[ Ref s1 (Struct "data96_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
data96Unpack = proc "mavlink_data96_unpack" $ \ msg buf -> body $ do
  store (msg ~> data96_type) =<< call unpack buf 0
  store (msg ~> len) =<< call unpack buf 1
  arrayUnpack buf 2 (msg ~> data96)

