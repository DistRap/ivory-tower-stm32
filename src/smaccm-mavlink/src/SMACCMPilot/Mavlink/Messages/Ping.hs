{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Ping where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

pingMsgId :: Uint8
pingMsgId = 4

pingCrcExtra :: Uint8
pingCrcExtra = 237

pingModule :: Module
pingModule = package "mavlink_ping_msg" $ do
  depend packModule
  incl pingUnpack
  defStruct (Proxy :: Proxy "ping_msg")

[ivory|
struct ping_msg
  { time_usec :: Stored Uint64
  ; ping_seq :: Stored Uint32
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkPingSender :: SizedMavlinkSender 14
                       -> Def ('[ ConstRef s (Struct "ping_msg") ] :-> ())
mkPingSender sender =
  proc ("mavlink_ping_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    pingPack (senderMacro sender) msg

instance MavlinkSendable "ping_msg" 14 where
  mkSender = mkPingSender

pingPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 14
                  -> ConstRef s1 (Struct "ping_msg")
                  -> Ivory eff ()
pingPack sender msg = do
  arr <- local (iarray [] :: Init (Array 14 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_usec)
  call_ pack buf 8 =<< deref (msg ~> ping_seq)
  call_ pack buf 12 =<< deref (msg ~> target_system)
  call_ pack buf 13 =<< deref (msg ~> target_component)
  sender pingMsgId (constRef arr) pingCrcExtra
  retVoid

instance MavlinkUnpackableMsg "ping_msg" where
    unpackMsg = ( pingUnpack , pingMsgId )

pingUnpack :: Def ('[ Ref s1 (Struct "ping_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
pingUnpack = proc "mavlink_ping_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_usec) =<< call unpack buf 0
  store (msg ~> ping_seq) =<< call unpack buf 8
  store (msg ~> target_system) =<< call unpack buf 12
  store (msg ~> target_component) =<< call unpack buf 13

