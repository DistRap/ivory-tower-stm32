{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SafetySetAllowedArea where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

safetySetAllowedAreaMsgId :: Uint8
safetySetAllowedAreaMsgId = 54

safetySetAllowedAreaCrcExtra :: Uint8
safetySetAllowedAreaCrcExtra = 15

safetySetAllowedAreaModule :: Module
safetySetAllowedAreaModule = package "mavlink_safety_set_allowed_area_msg" $ do
  depend packModule
  incl safetySetAllowedAreaUnpack
  defStruct (Proxy :: Proxy "safety_set_allowed_area_msg")

[ivory|
struct safety_set_allowed_area_msg
  { p1x :: Stored IFloat
  ; p1y :: Stored IFloat
  ; p1z :: Stored IFloat
  ; p2x :: Stored IFloat
  ; p2y :: Stored IFloat
  ; p2z :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; frame :: Stored Uint8
  }
|]

mkSafetySetAllowedAreaSender :: SizedMavlinkSender 27
                       -> Def ('[ ConstRef s (Struct "safety_set_allowed_area_msg") ] :-> ())
mkSafetySetAllowedAreaSender sender =
  proc ("mavlink_safety_set_allowed_area_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    safetySetAllowedAreaPack (senderMacro sender) msg

instance MavlinkSendable "safety_set_allowed_area_msg" 27 where
  mkSender = mkSafetySetAllowedAreaSender

safetySetAllowedAreaPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 27
                  -> ConstRef s1 (Struct "safety_set_allowed_area_msg")
                  -> Ivory eff ()
safetySetAllowedAreaPack sender msg = do
  arr <- local (iarray [] :: Init (Array 27 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> p1x)
  call_ pack buf 4 =<< deref (msg ~> p1y)
  call_ pack buf 8 =<< deref (msg ~> p1z)
  call_ pack buf 12 =<< deref (msg ~> p2x)
  call_ pack buf 16 =<< deref (msg ~> p2y)
  call_ pack buf 20 =<< deref (msg ~> p2z)
  call_ pack buf 24 =<< deref (msg ~> target_system)
  call_ pack buf 25 =<< deref (msg ~> target_component)
  call_ pack buf 26 =<< deref (msg ~> frame)
  sender safetySetAllowedAreaMsgId (constRef arr) safetySetAllowedAreaCrcExtra
  retVoid

instance MavlinkUnpackableMsg "safety_set_allowed_area_msg" where
    unpackMsg = ( safetySetAllowedAreaUnpack , safetySetAllowedAreaMsgId )

safetySetAllowedAreaUnpack :: Def ('[ Ref s1 (Struct "safety_set_allowed_area_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
safetySetAllowedAreaUnpack = proc "mavlink_safety_set_allowed_area_unpack" $ \ msg buf -> body $ do
  store (msg ~> p1x) =<< call unpack buf 0
  store (msg ~> p1y) =<< call unpack buf 4
  store (msg ~> p1z) =<< call unpack buf 8
  store (msg ~> p2x) =<< call unpack buf 12
  store (msg ~> p2y) =<< call unpack buf 16
  store (msg ~> p2z) =<< call unpack buf 20
  store (msg ~> target_system) =<< call unpack buf 24
  store (msg ~> target_component) =<< call unpack buf 25
  store (msg ~> frame) =<< call unpack buf 26

