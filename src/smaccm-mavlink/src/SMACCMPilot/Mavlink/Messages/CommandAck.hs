{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.CommandAck where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

commandAckMsgId :: Uint8
commandAckMsgId = 77

commandAckCrcExtra :: Uint8
commandAckCrcExtra = 143

commandAckModule :: Module
commandAckModule = package "mavlink_command_ack_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkCommandAckSender
  incl commandAckUnpack
  defStruct (Proxy :: Proxy "command_ack_msg")

[ivory|
struct command_ack_msg
  { command :: Stored Uint16
  ; result :: Stored Uint8
  }
|]

mkCommandAckSender ::
  Def ('[ ConstRef s0 (Struct "command_ack_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkCommandAckSender =
  proc "mavlink_command_ack_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 3 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> command)
  call_ pack buf 2 =<< deref (msg ~> result)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 3 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "commandAck payload of length 3 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    commandAckMsgId
                    commandAckCrcExtra
                    3
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "command_ack_msg" where
    unpackMsg = ( commandAckUnpack , commandAckMsgId )

commandAckUnpack :: Def ('[ Ref s1 (Struct "command_ack_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
commandAckUnpack = proc "mavlink_command_ack_unpack" $ \ msg buf -> body $ do
  store (msg ~> command) =<< call unpack buf 0
  store (msg ~> result) =<< call unpack buf 2

