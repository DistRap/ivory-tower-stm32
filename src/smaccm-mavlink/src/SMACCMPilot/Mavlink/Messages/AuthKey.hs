{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AuthKey where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

authKeyMsgId :: Uint8
authKeyMsgId = 7

authKeyCrcExtra :: Uint8
authKeyCrcExtra = 119

authKeyModule :: Module
authKeyModule = package "mavlink_auth_key_msg" $ do
  depend packModule
  incl authKeyUnpack
  defStruct (Proxy :: Proxy "auth_key_msg")

[ivory|
struct auth_key_msg
  { key :: Array 32 (Stored Uint8)
  }
|]

mkAuthKeySender :: SizedMavlinkSender 32
                       -> Def ('[ ConstRef s (Struct "auth_key_msg") ] :-> ())
mkAuthKeySender sender =
  proc ("mavlink_auth_key_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    authKeyPack (senderMacro sender) msg

instance MavlinkSendable "auth_key_msg" 32 where
  mkSender = mkAuthKeySender

authKeyPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 32
                  -> ConstRef s1 (Struct "auth_key_msg")
                  -> Ivory eff ()
authKeyPack sender msg = do
  arr <- local (iarray [] :: Init (Array 32 (Stored Uint8)))
  let buf = toCArray arr
  arrayPack buf 0 (msg ~> key)
  sender authKeyMsgId (constRef arr) authKeyCrcExtra
  retVoid

instance MavlinkUnpackableMsg "auth_key_msg" where
    unpackMsg = ( authKeyUnpack , authKeyMsgId )

authKeyUnpack :: Def ('[ Ref s1 (Struct "auth_key_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
authKeyUnpack = proc "mavlink_auth_key_unpack" $ \ msg buf -> body $ do
  arrayUnpack buf 0 (msg ~> key)

