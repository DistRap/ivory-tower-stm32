{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionRequest where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionRequestMsgId :: Uint8
missionRequestMsgId = 40

missionRequestCrcExtra :: Uint8
missionRequestCrcExtra = 230

missionRequestModule :: Module
missionRequestModule = package "mavlink_mission_request_msg" $ do
  depend packModule
  incl missionRequestUnpack
  defStruct (Proxy :: Proxy "mission_request_msg")

[ivory|
struct mission_request_msg
  { mission_request_seq :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionRequestSender :: SizedMavlinkSender 4
                       -> Def ('[ ConstRef s (Struct "mission_request_msg") ] :-> ())
mkMissionRequestSender sender =
  proc ("mavlink_mission_request_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionRequestPack (senderMacro sender) msg

instance MavlinkSendable "mission_request_msg" 4 where
  mkSender = mkMissionRequestSender

missionRequestPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 4
                  -> ConstRef s1 (Struct "mission_request_msg")
                  -> Ivory eff ()
missionRequestPack sender msg = do
  arr <- local (iarray [] :: Init (Array 4 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> mission_request_seq)
  call_ pack buf 2 =<< deref (msg ~> target_system)
  call_ pack buf 3 =<< deref (msg ~> target_component)
  sender missionRequestMsgId (constRef arr) missionRequestCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_request_msg" where
    unpackMsg = ( missionRequestUnpack , missionRequestMsgId )

missionRequestUnpack :: Def ('[ Ref s1 (Struct "mission_request_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionRequestUnpack = proc "mavlink_mission_request_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_request_seq) =<< call unpack buf 0
  store (msg ~> target_system) =<< call unpack buf 2
  store (msg ~> target_component) =<< call unpack buf 3

