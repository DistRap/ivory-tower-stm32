{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ServoOutputRaw where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send
import qualified SMACCMPilot.Communications as Comm

import Ivory.Language
import Ivory.Stdlib

servoOutputRawMsgId :: Uint8
servoOutputRawMsgId = 36

servoOutputRawCrcExtra :: Uint8
servoOutputRawCrcExtra = 222

servoOutputRawModule :: Module
servoOutputRawModule = package "mavlink_servo_output_raw_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkServoOutputRawSender
  incl servoOutputRawUnpack
  defStruct (Proxy :: Proxy "servo_output_raw_msg")

[ivory|
struct servo_output_raw_msg
  { time_usec :: Stored Uint32
  ; servo1_raw :: Stored Uint16
  ; servo2_raw :: Stored Uint16
  ; servo3_raw :: Stored Uint16
  ; servo4_raw :: Stored Uint16
  ; servo5_raw :: Stored Uint16
  ; servo6_raw :: Stored Uint16
  ; servo7_raw :: Stored Uint16
  ; servo8_raw :: Stored Uint16
  ; port :: Stored Uint8
  }
|]

mkServoOutputRawSender ::
  Def ('[ ConstRef s0 (Struct "servo_output_raw_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 Comm.MAVLinkArray -- tx buffer
        ] :-> ())
mkServoOutputRawSender =
  proc "mavlink_servo_output_raw_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 21 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_usec)
  call_ pack buf 4 =<< deref (msg ~> servo1_raw)
  call_ pack buf 6 =<< deref (msg ~> servo2_raw)
  call_ pack buf 8 =<< deref (msg ~> servo3_raw)
  call_ pack buf 10 =<< deref (msg ~> servo4_raw)
  call_ pack buf 12 =<< deref (msg ~> servo5_raw)
  call_ pack buf 14 =<< deref (msg ~> servo6_raw)
  call_ pack buf 16 =<< deref (msg ~> servo7_raw)
  call_ pack buf 18 =<< deref (msg ~> servo8_raw)
  call_ pack buf 20 =<< deref (msg ~> port)
  -- 6: header len, 2: CRC len
  let usedLen = 6 + 21 + 2 :: Integer
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "servoOutputRaw payload of length 21 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    servoOutputRawMsgId
                    servoOutputRawCrcExtra
                    21
                    seqNum
                    sendArr

instance MavlinkUnpackableMsg "servo_output_raw_msg" where
    unpackMsg = ( servoOutputRawUnpack , servoOutputRawMsgId )

servoOutputRawUnpack :: Def ('[ Ref s1 (Struct "servo_output_raw_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
servoOutputRawUnpack = proc "mavlink_servo_output_raw_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_usec) =<< call unpack buf 0
  store (msg ~> servo1_raw) =<< call unpack buf 4
  store (msg ~> servo2_raw) =<< call unpack buf 6
  store (msg ~> servo3_raw) =<< call unpack buf 8
  store (msg ~> servo4_raw) =<< call unpack buf 10
  store (msg ~> servo5_raw) =<< call unpack buf 12
  store (msg ~> servo6_raw) =<< call unpack buf 14
  store (msg ~> servo7_raw) =<< call unpack buf 16
  store (msg ~> servo8_raw) =<< call unpack buf 18
  store (msg ~> port) =<< call unpack buf 20

