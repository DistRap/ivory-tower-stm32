{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ChangeOperatorControl where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send
import qualified SMACCMPilot.Shared as S

import Ivory.Language
import Ivory.Stdlib

changeOperatorControlMsgId :: Uint8
changeOperatorControlMsgId = 5

changeOperatorControlCrcExtra :: Uint8
changeOperatorControlCrcExtra = 217

changeOperatorControlModule :: Module
changeOperatorControlModule = package "mavlink_change_operator_control_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkChangeOperatorControlSender
  incl changeOperatorControlUnpack
  defStruct (Proxy :: Proxy "change_operator_control_msg")

[ivory|
struct change_operator_control_msg
  { target_system :: Stored Uint8
  ; control_request :: Stored Uint8
  ; version :: Stored Uint8
  ; passkey :: Array 25 (Stored Uint8)
  }
|]

mkChangeOperatorControlSender ::
  Def ('[ ConstRef s0 (Struct "change_operator_control_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 S.MavLinkArray -- tx buffer
        ] :-> ())
mkChangeOperatorControlSender =
  proc "mavlink_change_operator_control_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 28 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> target_system)
  call_ pack buf 1 =<< deref (msg ~> control_request)
  call_ pack buf 2 =<< deref (msg ~> version)
  arrayPack buf 3 (msg ~> passkey)
  -- 6: header len, 2: CRC len
  let usedLen = 6 + 28 + 2 :: Integer
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "changeOperatorControl payload of length 28 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    changeOperatorControlMsgId
                    changeOperatorControlCrcExtra
                    28
                    seqNum
                    sendArr
            let usedLenIx = fromInteger usedLen
            -- Zero out the unused portion of the array.
            for (fromInteger sendArrLen - usedLenIx) $ \ix ->
              store (sendArr ! (ix + usedLenIx)) 0
            retVoid

instance MavlinkUnpackableMsg "change_operator_control_msg" where
    unpackMsg = ( changeOperatorControlUnpack , changeOperatorControlMsgId )

changeOperatorControlUnpack :: Def ('[ Ref s1 (Struct "change_operator_control_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
changeOperatorControlUnpack = proc "mavlink_change_operator_control_unpack" $ \ msg buf -> body $ do
  store (msg ~> target_system) =<< call unpack buf 0
  store (msg ~> control_request) =<< call unpack buf 1
  store (msg ~> version) =<< call unpack buf 2
  arrayUnpack buf 3 (msg ~> passkey)

