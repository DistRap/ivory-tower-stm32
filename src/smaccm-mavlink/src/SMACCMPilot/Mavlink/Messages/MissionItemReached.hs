{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionItemReached where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionItemReachedMsgId :: Uint8
missionItemReachedMsgId = 46

missionItemReachedCrcExtra :: Uint8
missionItemReachedCrcExtra = 11

missionItemReachedModule :: Module
missionItemReachedModule = package "mavlink_mission_item_reached_msg" $ do
  depend packModule
  incl missionItemReachedUnpack
  defStruct (Proxy :: Proxy "mission_item_reached_msg")

[ivory|
struct mission_item_reached_msg
  { mission_item_reached_seq :: Stored Uint16
  }
|]

mkMissionItemReachedSender :: SizedMavlinkSender 2
                       -> Def ('[ ConstRef s (Struct "mission_item_reached_msg") ] :-> ())
mkMissionItemReachedSender sender =
  proc ("mavlink_mission_item_reached_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionItemReachedPack (senderMacro sender) msg

instance MavlinkSendable "mission_item_reached_msg" 2 where
  mkSender = mkMissionItemReachedSender

missionItemReachedPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 2
                  -> ConstRef s1 (Struct "mission_item_reached_msg")
                  -> Ivory eff ()
missionItemReachedPack sender msg = do
  arr <- local (iarray [] :: Init (Array 2 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> mission_item_reached_seq)
  sender missionItemReachedMsgId (constRef arr) missionItemReachedCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_item_reached_msg" where
    unpackMsg = ( missionItemReachedUnpack , missionItemReachedMsgId )

missionItemReachedUnpack :: Def ('[ Ref s1 (Struct "mission_item_reached_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionItemReachedUnpack = proc "mavlink_mission_item_reached_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_item_reached_seq) =<< call unpack buf 0

