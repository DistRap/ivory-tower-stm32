{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GcsRadio where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

gcsRadioMsgId :: Uint8
gcsRadioMsgId = 175

gcsRadioCrcExtra :: Uint8
gcsRadioCrcExtra = 108

gcsRadioModule :: Module
gcsRadioModule = package "mavlink_gcs_radio_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGcsRadioSender
  incl gcsRadioUnpack
  defStruct (Proxy :: Proxy "gcs_radio_msg")

[ivory|
struct gcs_radio_msg
  { rxerrors :: Stored Uint16
  ; fixed :: Stored Uint16
  ; rssi :: Stored Uint8
  ; remrssi :: Stored Uint8
  ; txbuf :: Stored Uint8
  ; noise :: Stored Uint8
  ; remnoise :: Stored Uint8
  }
|]

mkGcsRadioSender ::
  Def ('[ ConstRef s0 (Struct "gcs_radio_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGcsRadioSender =
  proc "mavlink_gcs_radio_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 9 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> rxerrors)
  pack buf 2 =<< deref (msg ~> fixed)
  pack buf 4 =<< deref (msg ~> rssi)
  pack buf 5 =<< deref (msg ~> remrssi)
  pack buf 6 =<< deref (msg ~> txbuf)
  pack buf 7 =<< deref (msg ~> noise)
  pack buf 8 =<< deref (msg ~> remnoise)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 9 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "gcsRadio payload of length 9 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    gcsRadioMsgId
                    gcsRadioCrcExtra
                    9
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "gcs_radio_msg" where
    unpackMsg = ( gcsRadioUnpack , gcsRadioMsgId )

gcsRadioUnpack :: Def ('[ Ref s1 (Struct "gcs_radio_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
gcsRadioUnpack = proc "mavlink_gcs_radio_unpack" $ \ msg buf -> body $ do
  store (msg ~> rxerrors) =<< unpack buf 0
  store (msg ~> fixed) =<< unpack buf 2
  store (msg ~> rssi) =<< unpack buf 4
  store (msg ~> remrssi) =<< unpack buf 5
  store (msg ~> txbuf) =<< unpack buf 6
  store (msg ~> noise) =<< unpack buf 7
  store (msg ~> remnoise) =<< unpack buf 8

