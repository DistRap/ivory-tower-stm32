{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.BatteryStatus where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

batteryStatusMsgId :: Uint8
batteryStatusMsgId = 147

batteryStatusCrcExtra :: Uint8
batteryStatusCrcExtra = 42

batteryStatusModule :: Module
batteryStatusModule = package "mavlink_battery_status_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkBatteryStatusSender
  incl batteryStatusUnpack
  defStruct (Proxy :: Proxy "battery_status_msg")

[ivory|
struct battery_status_msg
  { voltage_cell_1 :: Stored Uint16
  ; voltage_cell_2 :: Stored Uint16
  ; voltage_cell_3 :: Stored Uint16
  ; voltage_cell_4 :: Stored Uint16
  ; voltage_cell_5 :: Stored Uint16
  ; voltage_cell_6 :: Stored Uint16
  ; current_battery :: Stored Sint16
  ; accu_id :: Stored Uint8
  ; battery_remaining :: Stored Sint8
  }
|]

mkBatteryStatusSender ::
  Def ('[ ConstRef s0 (Struct "battery_status_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkBatteryStatusSender =
  proc "mavlink_battery_status_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 16 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> voltage_cell_1)
  pack buf 2 =<< deref (msg ~> voltage_cell_2)
  pack buf 4 =<< deref (msg ~> voltage_cell_3)
  pack buf 6 =<< deref (msg ~> voltage_cell_4)
  pack buf 8 =<< deref (msg ~> voltage_cell_5)
  pack buf 10 =<< deref (msg ~> voltage_cell_6)
  pack buf 12 =<< deref (msg ~> current_battery)
  pack buf 14 =<< deref (msg ~> accu_id)
  pack buf 15 =<< deref (msg ~> battery_remaining)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 16 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "batteryStatus payload of length 16 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    batteryStatusMsgId
                    batteryStatusCrcExtra
                    16
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "battery_status_msg" where
    unpackMsg = ( batteryStatusUnpack , batteryStatusMsgId )

batteryStatusUnpack :: Def ('[ Ref s1 (Struct "battery_status_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
batteryStatusUnpack = proc "mavlink_battery_status_unpack" $ \ msg buf -> body $ do
  store (msg ~> voltage_cell_1) =<< unpack buf 0
  store (msg ~> voltage_cell_2) =<< unpack buf 2
  store (msg ~> voltage_cell_3) =<< unpack buf 4
  store (msg ~> voltage_cell_4) =<< unpack buf 6
  store (msg ~> voltage_cell_5) =<< unpack buf 8
  store (msg ~> voltage_cell_6) =<< unpack buf 10
  store (msg ~> current_battery) =<< unpack buf 12
  store (msg ~> accu_id) =<< unpack buf 14
  store (msg ~> battery_remaining) =<< unpack buf 15

