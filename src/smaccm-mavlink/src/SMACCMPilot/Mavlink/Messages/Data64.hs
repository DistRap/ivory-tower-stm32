{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Data64 where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

data64MsgId :: Uint8
data64MsgId = 171

data64CrcExtra :: Uint8
data64CrcExtra = 170

data64Module :: Module
data64Module = package "mavlink_data64_msg" $ do
  depend packModule
  incl data64Unpack
  defStruct (Proxy :: Proxy "data64_msg")

[ivory|
struct data64_msg
  { data64_type :: Stored Uint8
  ; len :: Stored Uint8
  ; data64 :: Array 64 (Stored Uint8)
  }
|]

mkData64Sender :: SizedMavlinkSender 66
                       -> Def ('[ ConstRef s (Struct "data64_msg") ] :-> ())
mkData64Sender sender =
  proc ("mavlink_data64_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    noReturn $ data64Pack (senderMacro sender) msg

instance MavlinkSendable "data64_msg" 66 where
  mkSender = mkData64Sender

data64Pack :: SenderMacro cs (Stack cs) 66
                  -> ConstRef s1 (Struct "data64_msg")
                  -> Ivory (AllocEffects cs) ()
data64Pack sender msg = do
  arr <- local (iarray [] :: Init (Array 66 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> data64_type)
  call_ pack buf 1 =<< deref (msg ~> len)
  arrayPack buf 2 (msg ~> data64)
  sender data64MsgId (constRef arr) data64CrcExtra

instance MavlinkUnpackableMsg "data64_msg" where
    unpackMsg = ( data64Unpack , data64MsgId )

data64Unpack :: Def ('[ Ref s1 (Struct "data64_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
data64Unpack = proc "mavlink_data64_unpack" $ \ msg buf -> body $ do
  store (msg ~> data64_type) =<< call unpack buf 0
  store (msg ~> len) =<< call unpack buf 1
  arrayUnpack buf 2 (msg ~> data64)

