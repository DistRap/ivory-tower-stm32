{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RawImu where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

rawImuMsgId :: Uint8
rawImuMsgId = 27

rawImuCrcExtra :: Uint8
rawImuCrcExtra = 144

rawImuModule :: Module
rawImuModule = package "mavlink_raw_imu_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRawImuSender
  incl rawImuUnpack
  defStruct (Proxy :: Proxy "raw_imu_msg")

[ivory|
struct raw_imu_msg
  { time_usec :: Stored Uint64
  ; xacc :: Stored Sint16
  ; yacc :: Stored Sint16
  ; zacc :: Stored Sint16
  ; xgyro :: Stored Sint16
  ; ygyro :: Stored Sint16
  ; zgyro :: Stored Sint16
  ; xmag :: Stored Sint16
  ; ymag :: Stored Sint16
  ; zmag :: Stored Sint16
  }
|]

mkRawImuSender ::
  Def ('[ ConstRef s0 (Struct "raw_imu_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRawImuSender =
  proc "mavlink_raw_imu_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 26 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> time_usec)
  pack buf 8 =<< deref (msg ~> xacc)
  pack buf 10 =<< deref (msg ~> yacc)
  pack buf 12 =<< deref (msg ~> zacc)
  pack buf 14 =<< deref (msg ~> xgyro)
  pack buf 16 =<< deref (msg ~> ygyro)
  pack buf 18 =<< deref (msg ~> zgyro)
  pack buf 20 =<< deref (msg ~> xmag)
  pack buf 22 =<< deref (msg ~> ymag)
  pack buf 24 =<< deref (msg ~> zmag)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 26 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "rawImu payload of length 26 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    rawImuMsgId
                    rawImuCrcExtra
                    26
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "raw_imu_msg" where
    unpackMsg = ( rawImuUnpack , rawImuMsgId )

rawImuUnpack :: Def ('[ Ref s1 (Struct "raw_imu_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rawImuUnpack = proc "mavlink_raw_imu_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_usec) =<< unpack buf 0
  store (msg ~> xacc) =<< unpack buf 8
  store (msg ~> yacc) =<< unpack buf 10
  store (msg ~> zacc) =<< unpack buf 12
  store (msg ~> xgyro) =<< unpack buf 14
  store (msg ~> ygyro) =<< unpack buf 16
  store (msg ~> zgyro) =<< unpack buf 18
  store (msg ~> xmag) =<< unpack buf 20
  store (msg ~> ymag) =<< unpack buf 22
  store (msg ~> zmag) =<< unpack buf 24

