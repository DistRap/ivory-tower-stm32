{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetRollPitchYawSpeedThrust where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

setRollPitchYawSpeedThrustMsgId :: Uint8
setRollPitchYawSpeedThrustMsgId = 57

setRollPitchYawSpeedThrustCrcExtra :: Uint8
setRollPitchYawSpeedThrustCrcExtra = 24

setRollPitchYawSpeedThrustModule :: Module
setRollPitchYawSpeedThrustModule = package "mavlink_set_roll_pitch_yaw_speed_thrust_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkSetRollPitchYawSpeedThrustSender
  incl setRollPitchYawSpeedThrustUnpack
  defStruct (Proxy :: Proxy "set_roll_pitch_yaw_speed_thrust_msg")

[ivory|
struct set_roll_pitch_yaw_speed_thrust_msg
  { roll_speed :: Stored IFloat
  ; pitch_speed :: Stored IFloat
  ; yaw_speed :: Stored IFloat
  ; thrust :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkSetRollPitchYawSpeedThrustSender ::
  Def ('[ ConstRef s0 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 MavlinkArray -- tx buffer
        ] :-> ())
mkSetRollPitchYawSpeedThrustSender =
  proc "mavlink_set_roll_pitch_yaw_speed_thrust_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 18 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> roll_speed)
  call_ pack buf 4 =<< deref (msg ~> pitch_speed)
  call_ pack buf 8 =<< deref (msg ~> yaw_speed)
  call_ pack buf 12 =<< deref (msg ~> thrust)
  call_ pack buf 16 =<< deref (msg ~> target_system)
  call_ pack buf 17 =<< deref (msg ~> target_component)
  -- 6: header len, 2: CRC len
  if arrayLen sendArr < (6 + 18 + 2 :: Integer)
    then error "setRollPitchYawSpeedThrust payload is too large for 18 sender!"
    else do -- Copy, leaving room for the payload
            _ <- arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    setRollPitchYawSpeedThrustMsgId
                    setRollPitchYawSpeedThrustCrcExtra
                    18
                    seqNum
                    sendArr
            retVoid

instance MavlinkUnpackableMsg "set_roll_pitch_yaw_speed_thrust_msg" where
    unpackMsg = ( setRollPitchYawSpeedThrustUnpack , setRollPitchYawSpeedThrustMsgId )

setRollPitchYawSpeedThrustUnpack :: Def ('[ Ref s1 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setRollPitchYawSpeedThrustUnpack = proc "mavlink_set_roll_pitch_yaw_speed_thrust_unpack" $ \ msg buf -> body $ do
  store (msg ~> roll_speed) =<< call unpack buf 0
  store (msg ~> pitch_speed) =<< call unpack buf 4
  store (msg ~> yaw_speed) =<< call unpack buf 8
  store (msg ~> thrust) =<< call unpack buf 12
  store (msg ~> target_system) =<< call unpack buf 16
  store (msg ~> target_component) =<< call unpack buf 17

