{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AltCtlDebug where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

altCtlDebugMsgId :: Uint8
altCtlDebugMsgId = 173

altCtlDebugCrcExtra :: Uint8
altCtlDebugCrcExtra = 220

altCtlDebugModule :: Module
altCtlDebugModule = package "mavlink_alt_ctl_debug_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkAltCtlDebugSender
  incl altCtlDebugUnpack
  defStruct (Proxy :: Proxy "alt_ctl_debug_msg")

[ivory|
struct alt_ctl_debug_msg
  { alt_est :: Stored IFloat
  ; alt_rate_est :: Stored IFloat
  ; thrust_p :: Stored IFloat
  ; thrust_i :: Stored IFloat
  ; thrust_d :: Stored IFloat
  ; thrust_i_reset :: Stored IFloat
  }
|]

mkAltCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "alt_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAltCtlDebugSender =
  proc "mavlink_alt_ctl_debug_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 24 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> alt_est)
  call_ pack buf 4 =<< deref (msg ~> alt_rate_est)
  call_ pack buf 8 =<< deref (msg ~> thrust_p)
  call_ pack buf 12 =<< deref (msg ~> thrust_i)
  call_ pack buf 16 =<< deref (msg ~> thrust_d)
  call_ pack buf 20 =<< deref (msg ~> thrust_i_reset)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 24 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "altCtlDebug payload of length 24 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    altCtlDebugMsgId
                    altCtlDebugCrcExtra
                    24
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "alt_ctl_debug_msg" where
    unpackMsg = ( altCtlDebugUnpack , altCtlDebugMsgId )

altCtlDebugUnpack :: Def ('[ Ref s1 (Struct "alt_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
altCtlDebugUnpack = proc "mavlink_alt_ctl_debug_unpack" $ \ msg buf -> body $ do
  store (msg ~> alt_est) =<< call unpack buf 0
  store (msg ~> alt_rate_est) =<< call unpack buf 4
  store (msg ~> thrust_p) =<< call unpack buf 8
  store (msg ~> thrust_i) =<< call unpack buf 12
  store (msg ~> thrust_d) =<< call unpack buf 16
  store (msg ~> thrust_i_reset) =<< call unpack buf 20

