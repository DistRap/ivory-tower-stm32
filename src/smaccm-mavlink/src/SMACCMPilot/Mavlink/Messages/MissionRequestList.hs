{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionRequestList where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionRequestListMsgId :: Uint8
missionRequestListMsgId = 43

missionRequestListCrcExtra :: Uint8
missionRequestListCrcExtra = 132

missionRequestListModule :: Module
missionRequestListModule = package "mavlink_mission_request_list_msg" $ do
  depend packModule
  incl missionRequestListUnpack
  defStruct (Proxy :: Proxy "mission_request_list_msg")

[ivory|
struct mission_request_list_msg
  { target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionRequestListSender :: SizedMavlinkSender 2
                       -> Def ('[ ConstRef s (Struct "mission_request_list_msg") ] :-> ())
mkMissionRequestListSender sender =
  proc ("mavlink_mission_request_list_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionRequestListPack (senderMacro sender) msg

instance MavlinkSendable "mission_request_list_msg" 2 where
  mkSender = mkMissionRequestListSender

missionRequestListPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 2
                  -> ConstRef s1 (Struct "mission_request_list_msg")
                  -> Ivory eff ()
missionRequestListPack sender msg = do
  arr <- local (iarray [] :: Init (Array 2 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> target_system)
  call_ pack buf 1 =<< deref (msg ~> target_component)
  sender missionRequestListMsgId (constRef arr) missionRequestListCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_request_list_msg" where
    unpackMsg = ( missionRequestListUnpack , missionRequestListMsgId )

missionRequestListUnpack :: Def ('[ Ref s1 (Struct "mission_request_list_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionRequestListUnpack = proc "mavlink_mission_request_list_unpack" $ \ msg buf -> body $ do
  store (msg ~> target_system) =<< call unpack buf 0
  store (msg ~> target_component) =<< call unpack buf 1

