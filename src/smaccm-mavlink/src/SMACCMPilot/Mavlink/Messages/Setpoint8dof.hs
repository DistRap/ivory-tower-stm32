{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Setpoint8dof where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

setpoint8dofMsgId :: Uint8
setpoint8dofMsgId = 148

setpoint8dofCrcExtra :: Uint8
setpoint8dofCrcExtra = 241

setpoint8dofModule :: Module
setpoint8dofModule = package "mavlink_setpoint_8dof_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetpoint8dofSender
  incl setpoint8dofUnpack
  defStruct (Proxy :: Proxy "setpoint_8dof_msg")

[ivory|
struct setpoint_8dof_msg
  { val1 :: Stored IFloat
  ; val2 :: Stored IFloat
  ; val3 :: Stored IFloat
  ; val4 :: Stored IFloat
  ; val5 :: Stored IFloat
  ; val6 :: Stored IFloat
  ; val7 :: Stored IFloat
  ; val8 :: Stored IFloat
  ; target_system :: Stored Uint8
  }
|]

mkSetpoint8dofSender ::
  Def ('[ ConstRef s0 (Struct "setpoint_8dof_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetpoint8dofSender =
  proc "mavlink_setpoint_8dof_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 33 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> val1)
  pack buf 4 =<< deref (msg ~> val2)
  pack buf 8 =<< deref (msg ~> val3)
  pack buf 12 =<< deref (msg ~> val4)
  pack buf 16 =<< deref (msg ~> val5)
  pack buf 20 =<< deref (msg ~> val6)
  pack buf 24 =<< deref (msg ~> val7)
  pack buf 28 =<< deref (msg ~> val8)
  pack buf 32 =<< deref (msg ~> target_system)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 33 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "setpoint8dof payload of length 33 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    setpoint8dofMsgId
                    setpoint8dofCrcExtra
                    33
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "setpoint_8dof_msg" where
    unpackMsg = ( setpoint8dofUnpack , setpoint8dofMsgId )

setpoint8dofUnpack :: Def ('[ Ref s1 (Struct "setpoint_8dof_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setpoint8dofUnpack = proc "mavlink_setpoint_8dof_unpack" $ \ msg buf -> body $ do
  store (msg ~> val1) =<< unpack buf 0
  store (msg ~> val2) =<< unpack buf 4
  store (msg ~> val3) =<< unpack buf 8
  store (msg ~> val4) =<< unpack buf 12
  store (msg ~> val5) =<< unpack buf 16
  store (msg ~> val6) =<< unpack buf 20
  store (msg ~> val7) =<< unpack buf 24
  store (msg ~> val8) =<< unpack buf 28
  store (msg ~> target_system) =<< unpack buf 32

