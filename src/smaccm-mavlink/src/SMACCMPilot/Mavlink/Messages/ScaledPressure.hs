{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ScaledPressure where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

scaledPressureMsgId :: Uint8
scaledPressureMsgId = 29

scaledPressureCrcExtra :: Uint8
scaledPressureCrcExtra = 115

scaledPressureModule :: Module
scaledPressureModule = package "mavlink_scaled_pressure_msg" $ do
  depend packModule
  incl scaledPressureUnpack
  defStruct (Proxy :: Proxy "scaled_pressure_msg")

[ivory|
struct scaled_pressure_msg
  { time_boot_ms :: Stored Uint32
  ; press_abs :: Stored IFloat
  ; press_diff :: Stored IFloat
  ; temperature :: Stored Sint16
  }
|]

mkScaledPressureSender :: SizedMavlinkSender 14
                       -> Def ('[ ConstRef s (Struct "scaled_pressure_msg") ] :-> ())
mkScaledPressureSender sender =
  proc ("mavlink_scaled_pressure_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    noReturn $ scaledPressurePack (senderMacro sender) msg

instance MavlinkSendable "scaled_pressure_msg" 14 where
  mkSender = mkScaledPressureSender

scaledPressurePack :: SenderMacro cs (Stack cs) 14
                  -> ConstRef s1 (Struct "scaled_pressure_msg")
                  -> Ivory (AllocEffects cs) ()
scaledPressurePack sender msg = do
  arr <- local (iarray [] :: Init (Array 14 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_boot_ms)
  call_ pack buf 4 =<< deref (msg ~> press_abs)
  call_ pack buf 8 =<< deref (msg ~> press_diff)
  call_ pack buf 12 =<< deref (msg ~> temperature)
  sender scaledPressureMsgId (constRef arr) scaledPressureCrcExtra

instance MavlinkUnpackableMsg "scaled_pressure_msg" where
    unpackMsg = ( scaledPressureUnpack , scaledPressureMsgId )

scaledPressureUnpack :: Def ('[ Ref s1 (Struct "scaled_pressure_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
scaledPressureUnpack = proc "mavlink_scaled_pressure_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< call unpack buf 0
  store (msg ~> press_abs) =<< call unpack buf 4
  store (msg ~> press_diff) =<< call unpack buf 8
  store (msg ~> temperature) =<< call unpack buf 12

