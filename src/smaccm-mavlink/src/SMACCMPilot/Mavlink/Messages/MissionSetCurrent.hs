{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionSetCurrent where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionSetCurrentMsgId :: Uint8
missionSetCurrentMsgId = 41

missionSetCurrentCrcExtra :: Uint8
missionSetCurrentCrcExtra = 28

missionSetCurrentModule :: Module
missionSetCurrentModule = package "mavlink_mission_set_current_msg" $ do
  depend packModule
  incl missionSetCurrentUnpack
  defStruct (Proxy :: Proxy "mission_set_current_msg")

[ivory|
struct mission_set_current_msg
  { mission_set_current_seq :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionSetCurrentSender :: SizedMavlinkSender 4
                       -> Def ('[ ConstRef s (Struct "mission_set_current_msg") ] :-> ())
mkMissionSetCurrentSender sender =
  proc ("mavlink_mission_set_current_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionSetCurrentPack (senderMacro sender) msg

instance MavlinkSendable "mission_set_current_msg" 4 where
  mkSender = mkMissionSetCurrentSender

missionSetCurrentPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 4
                  -> ConstRef s1 (Struct "mission_set_current_msg")
                  -> Ivory eff ()
missionSetCurrentPack sender msg = do
  arr <- local (iarray [] :: Init (Array 4 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> mission_set_current_seq)
  call_ pack buf 2 =<< deref (msg ~> target_system)
  call_ pack buf 3 =<< deref (msg ~> target_component)
  sender missionSetCurrentMsgId (constRef arr) missionSetCurrentCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_set_current_msg" where
    unpackMsg = ( missionSetCurrentUnpack , missionSetCurrentMsgId )

missionSetCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_set_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionSetCurrentUnpack = proc "mavlink_mission_set_current_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_set_current_seq) =<< call unpack buf 0
  store (msg ~> target_system) =<< call unpack buf 2
  store (msg ~> target_component) =<< call unpack buf 3

