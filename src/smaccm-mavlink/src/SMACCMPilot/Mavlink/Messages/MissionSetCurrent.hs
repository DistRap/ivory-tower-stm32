{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionSetCurrent where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

missionSetCurrentMsgId :: Uint8
missionSetCurrentMsgId = 41

missionSetCurrentCrcExtra :: Uint8
missionSetCurrentCrcExtra = 28

missionSetCurrentModule :: Module
missionSetCurrentModule = package "mavlink_mission_set_current_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionSetCurrentSender
  incl missionSetCurrentUnpack
  defStruct (Proxy :: Proxy "mission_set_current_msg")

[ivory|
struct mission_set_current_msg
  { mission_set_current_seq :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionSetCurrentSender ::
  Def ('[ ConstRef s0 (Struct "mission_set_current_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionSetCurrentSender =
  proc "mavlink_mission_set_current_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 4 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> mission_set_current_seq)
  pack buf 2 =<< deref (msg ~> target_system)
  pack buf 3 =<< deref (msg ~> target_component)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 4 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "missionSetCurrent payload of length 4 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    missionSetCurrentMsgId
                    missionSetCurrentCrcExtra
                    4
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "mission_set_current_msg" where
    unpackMsg = ( missionSetCurrentUnpack , missionSetCurrentMsgId )

missionSetCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_set_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionSetCurrentUnpack = proc "mavlink_mission_set_current_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_set_current_seq) =<< unpack buf 0
  store (msg ~> target_system) =<< unpack buf 2
  store (msg ~> target_component) =<< unpack buf 3

