{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Attitude where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

attitudeMsgId :: Uint8
attitudeMsgId = 30

attitudeCrcExtra :: Uint8
attitudeCrcExtra = 39

attitudeModule :: Module
attitudeModule = package "mavlink_attitude_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAttitudeSender
  incl attitudeUnpack
  defStruct (Proxy :: Proxy "attitude_msg")

[ivory|
struct attitude_msg
  { time_boot_ms :: Stored Uint32
  ; roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; rollspeed :: Stored IFloat
  ; pitchspeed :: Stored IFloat
  ; yawspeed :: Stored IFloat
  }
|]

mkAttitudeSender ::
  Def ('[ ConstRef s0 (Struct "attitude_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttitudeSender =
  proc "mavlink_attitude_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 28 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> time_boot_ms)
  pack buf 4 =<< deref (msg ~> roll)
  pack buf 8 =<< deref (msg ~> pitch)
  pack buf 12 =<< deref (msg ~> yaw)
  pack buf 16 =<< deref (msg ~> rollspeed)
  pack buf 20 =<< deref (msg ~> pitchspeed)
  pack buf 24 =<< deref (msg ~> yawspeed)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 28 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "attitude payload of length 28 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    attitudeMsgId
                    attitudeCrcExtra
                    28
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "attitude_msg" where
    unpackMsg = ( attitudeUnpack , attitudeMsgId )

attitudeUnpack :: Def ('[ Ref s1 (Struct "attitude_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attitudeUnpack = proc "mavlink_attitude_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< unpack buf 0
  store (msg ~> roll) =<< unpack buf 4
  store (msg ~> pitch) =<< unpack buf 8
  store (msg ~> yaw) =<< unpack buf 12
  store (msg ~> rollspeed) =<< unpack buf 16
  store (msg ~> pitchspeed) =<< unpack buf 20
  store (msg ~> yawspeed) =<< unpack buf 24

