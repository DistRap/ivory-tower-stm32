{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.OpticalFlow where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

opticalFlowMsgId :: Uint8
opticalFlowMsgId = 100

opticalFlowCrcExtra :: Uint8
opticalFlowCrcExtra = 175

opticalFlowModule :: Module
opticalFlowModule = package "mavlink_optical_flow_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkOpticalFlowSender
  incl opticalFlowUnpack
  defStruct (Proxy :: Proxy "optical_flow_msg")

[ivory|
struct optical_flow_msg
  { time_usec :: Stored Uint64
  ; flow_comp_m_x :: Stored IFloat
  ; flow_comp_m_y :: Stored IFloat
  ; ground_distance :: Stored IFloat
  ; flow_x :: Stored Sint16
  ; flow_y :: Stored Sint16
  ; sensor_id :: Stored Uint8
  ; quality :: Stored Uint8
  }
|]

mkOpticalFlowSender ::
  Def ('[ ConstRef s0 (Struct "optical_flow_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkOpticalFlowSender =
  proc "mavlink_optical_flow_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 26 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> time_usec)
  pack buf 8 =<< deref (msg ~> flow_comp_m_x)
  pack buf 12 =<< deref (msg ~> flow_comp_m_y)
  pack buf 16 =<< deref (msg ~> ground_distance)
  pack buf 20 =<< deref (msg ~> flow_x)
  pack buf 22 =<< deref (msg ~> flow_y)
  pack buf 24 =<< deref (msg ~> sensor_id)
  pack buf 25 =<< deref (msg ~> quality)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 26 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "opticalFlow payload of length 26 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    opticalFlowMsgId
                    opticalFlowCrcExtra
                    26
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "optical_flow_msg" where
    unpackMsg = ( opticalFlowUnpack , opticalFlowMsgId )

opticalFlowUnpack :: Def ('[ Ref s1 (Struct "optical_flow_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
opticalFlowUnpack = proc "mavlink_optical_flow_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_usec) =<< unpack buf 0
  store (msg ~> flow_comp_m_x) =<< unpack buf 8
  store (msg ~> flow_comp_m_y) =<< unpack buf 12
  store (msg ~> ground_distance) =<< unpack buf 16
  store (msg ~> flow_x) =<< unpack buf 20
  store (msg ~> flow_y) =<< unpack buf 22
  store (msg ~> sensor_id) =<< unpack buf 24
  store (msg ~> quality) =<< unpack buf 25

