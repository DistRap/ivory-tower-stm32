{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.NavControllerOutput where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

navControllerOutputMsgId :: Uint8
navControllerOutputMsgId = 62

navControllerOutputCrcExtra :: Uint8
navControllerOutputCrcExtra = 183

navControllerOutputModule :: Module
navControllerOutputModule = package "mavlink_nav_controller_output_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkNavControllerOutputSender
  incl navControllerOutputUnpack
  defStruct (Proxy :: Proxy "nav_controller_output_msg")

[ivory|
struct nav_controller_output_msg
  { nav_roll :: Stored IFloat
  ; nav_pitch :: Stored IFloat
  ; alt_error :: Stored IFloat
  ; aspd_error :: Stored IFloat
  ; xtrack_error :: Stored IFloat
  ; nav_bearing :: Stored Sint16
  ; target_bearing :: Stored Sint16
  ; wp_dist :: Stored Uint16
  }
|]

mkNavControllerOutputSender ::
  Def ('[ ConstRef s0 (Struct "nav_controller_output_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkNavControllerOutputSender =
  proc "mavlink_nav_controller_output_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 26 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> nav_roll)
  pack buf 4 =<< deref (msg ~> nav_pitch)
  pack buf 8 =<< deref (msg ~> alt_error)
  pack buf 12 =<< deref (msg ~> aspd_error)
  pack buf 16 =<< deref (msg ~> xtrack_error)
  pack buf 20 =<< deref (msg ~> nav_bearing)
  pack buf 22 =<< deref (msg ~> target_bearing)
  pack buf 24 =<< deref (msg ~> wp_dist)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 26 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "navControllerOutput payload of length 26 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    navControllerOutputMsgId
                    navControllerOutputCrcExtra
                    26
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "nav_controller_output_msg" where
    unpackMsg = ( navControllerOutputUnpack , navControllerOutputMsgId )

navControllerOutputUnpack :: Def ('[ Ref s1 (Struct "nav_controller_output_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
navControllerOutputUnpack = proc "mavlink_nav_controller_output_unpack" $ \ msg buf -> body $ do
  store (msg ~> nav_roll) =<< unpack buf 0
  store (msg ~> nav_pitch) =<< unpack buf 4
  store (msg ~> alt_error) =<< unpack buf 8
  store (msg ~> aspd_error) =<< unpack buf 12
  store (msg ~> xtrack_error) =<< unpack buf 16
  store (msg ~> nav_bearing) =<< unpack buf 20
  store (msg ~> target_bearing) =<< unpack buf 22
  store (msg ~> wp_dist) =<< unpack buf 24

