{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MemoryVect where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

memoryVectMsgId :: Uint8
memoryVectMsgId = 249

memoryVectCrcExtra :: Uint8
memoryVectCrcExtra = 204

memoryVectModule :: Module
memoryVectModule = package "mavlink_memory_vect_msg" $ do
  depend packModule
  incl memoryVectUnpack
  defStruct (Proxy :: Proxy "memory_vect_msg")

[ivory|
struct memory_vect_msg
  { address :: Stored Uint16
  ; ver :: Stored Uint8
  ; memory_vect_type :: Stored Uint8
  ; value :: Array 32 (Stored Sint8)
  }
|]

mkMemoryVectSender :: SizedMavlinkSender 36
                       -> Def ('[ ConstRef s (Struct "memory_vect_msg") ] :-> ())
mkMemoryVectSender sender =
  proc ("mavlink_memory_vect_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    memoryVectPack (senderMacro sender) msg

instance MavlinkSendable "memory_vect_msg" 36 where
  mkSender = mkMemoryVectSender

memoryVectPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 36
                  -> ConstRef s1 (Struct "memory_vect_msg")
                  -> Ivory eff ()
memoryVectPack sender msg = do
  arr <- local (iarray [] :: Init (Array 36 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> address)
  call_ pack buf 2 =<< deref (msg ~> ver)
  call_ pack buf 3 =<< deref (msg ~> memory_vect_type)
  arrayPack buf 4 (msg ~> value)
  sender memoryVectMsgId (constRef arr) memoryVectCrcExtra
  retVoid

instance MavlinkUnpackableMsg "memory_vect_msg" where
    unpackMsg = ( memoryVectUnpack , memoryVectMsgId )

memoryVectUnpack :: Def ('[ Ref s1 (Struct "memory_vect_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
memoryVectUnpack = proc "mavlink_memory_vect_unpack" $ \ msg buf -> body $ do
  store (msg ~> address) =<< call unpack buf 0
  store (msg ~> ver) =<< call unpack buf 2
  store (msg ~> memory_vect_type) =<< call unpack buf 3
  arrayUnpack buf 4 (msg ~> value)

