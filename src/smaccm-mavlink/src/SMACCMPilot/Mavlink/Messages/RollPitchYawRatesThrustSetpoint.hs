{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RollPitchYawRatesThrustSetpoint where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

rollPitchYawRatesThrustSetpointMsgId :: Uint8
rollPitchYawRatesThrustSetpointMsgId = 80

rollPitchYawRatesThrustSetpointCrcExtra :: Uint8
rollPitchYawRatesThrustSetpointCrcExtra = 127

rollPitchYawRatesThrustSetpointModule :: Module
rollPitchYawRatesThrustSetpointModule = package "mavlink_roll_pitch_yaw_rates_thrust_setpoint_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkRollPitchYawRatesThrustSetpointSender
  incl rollPitchYawRatesThrustSetpointUnpack
  defStruct (Proxy :: Proxy "roll_pitch_yaw_rates_thrust_setpoint_msg")

[ivory|
struct roll_pitch_yaw_rates_thrust_setpoint_msg
  { time_boot_ms :: Stored Uint32
  ; roll_rate :: Stored IFloat
  ; pitch_rate :: Stored IFloat
  ; yaw_rate :: Stored IFloat
  ; thrust :: Stored IFloat
  }
|]

mkRollPitchYawRatesThrustSetpointSender ::
  Def ('[ ConstRef s0 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Array 128 (Stored Uint8)) -- tx buffer
        ] :-> ())
mkRollPitchYawRatesThrustSetpointSender =
  proc "mavlink_roll_pitch_yaw_rates_thrust_setpoint_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 20 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_boot_ms)
  call_ pack buf 4 =<< deref (msg ~> roll_rate)
  call_ pack buf 8 =<< deref (msg ~> pitch_rate)
  call_ pack buf 12 =<< deref (msg ~> yaw_rate)
  call_ pack buf 16 =<< deref (msg ~> thrust)
  -- 6: header len, 2: CRC len
  if arrayLen sendArr < (6 + 20 + 2 :: Integer)
    then error "rollPitchYawRatesThrustSetpoint payload is too large for 20 sender!"
    else do -- Copy, leaving room for the payload
            _ <- arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    rollPitchYawRatesThrustSetpointMsgId
                    rollPitchYawRatesThrustSetpointCrcExtra
                    20
                    seqNum
                    sendArr
            retVoid

instance MavlinkUnpackableMsg "roll_pitch_yaw_rates_thrust_setpoint_msg" where
    unpackMsg = ( rollPitchYawRatesThrustSetpointUnpack , rollPitchYawRatesThrustSetpointMsgId )

rollPitchYawRatesThrustSetpointUnpack :: Def ('[ Ref s1 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rollPitchYawRatesThrustSetpointUnpack = proc "mavlink_roll_pitch_yaw_rates_thrust_setpoint_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< call unpack buf 0
  store (msg ~> roll_rate) =<< call unpack buf 4
  store (msg ~> pitch_rate) =<< call unpack buf 8
  store (msg ~> yaw_rate) =<< call unpack buf 12
  store (msg ~> thrust) =<< call unpack buf 16

