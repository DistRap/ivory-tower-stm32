{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ParamValue where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

paramValueMsgId :: Uint8
paramValueMsgId = 22

paramValueCrcExtra :: Uint8
paramValueCrcExtra = 220

paramValueModule :: Module
paramValueModule = package "mavlink_param_value_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkParamValueSender
  incl paramValueUnpack
  defStruct (Proxy :: Proxy "param_value_msg")

[ivory|
struct param_value_msg
  { param_value :: Stored IFloat
  ; param_count :: Stored Uint16
  ; param_index :: Stored Uint16
  ; param_type :: Stored Uint8
  ; param_id :: Array 16 (Stored Uint8)
  }
|]

mkParamValueSender ::
  Def ('[ ConstRef s0 (Struct "param_value_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkParamValueSender =
  proc "mavlink_param_value_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 25 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> param_value)
  call_ pack buf 4 =<< deref (msg ~> param_count)
  call_ pack buf 6 =<< deref (msg ~> param_index)
  call_ pack buf 24 =<< deref (msg ~> param_type)
  arrayPack buf 8 (msg ~> param_id)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 25 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "paramValue payload of length 25 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    paramValueMsgId
                    paramValueCrcExtra
                    25
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "param_value_msg" where
    unpackMsg = ( paramValueUnpack , paramValueMsgId )

paramValueUnpack :: Def ('[ Ref s1 (Struct "param_value_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
paramValueUnpack = proc "mavlink_param_value_unpack" $ \ msg buf -> body $ do
  store (msg ~> param_value) =<< call unpack buf 0
  store (msg ~> param_count) =<< call unpack buf 4
  store (msg ~> param_index) =<< call unpack buf 6
  store (msg ~> param_type) =<< call unpack buf 24
  arrayUnpack buf 8 (msg ~> param_id)

