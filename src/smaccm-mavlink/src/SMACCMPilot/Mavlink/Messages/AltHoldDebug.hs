{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AltHoldDebug where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

altHoldDebugMsgId :: Uint8
altHoldDebugMsgId = 173

altHoldDebugCrcExtra :: Uint8
altHoldDebugCrcExtra = 45

altHoldDebugModule :: Module
altHoldDebugModule = package "mavlink_alt_hold_debug_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkAltHoldDebugSender
  incl altHoldDebugUnpack
  defStruct (Proxy :: Proxy "alt_hold_debug_msg")

[ivory|
struct alt_hold_debug_msg
  { throttle_cruise :: Stored IFloat
  ; throttle_avg :: Stored IFloat
  ; target_alt :: Stored IFloat
  ; rate_filter :: Stored IFloat
  ; accel_filter :: Stored IFloat
  ; speed_filter :: Stored IFloat
  ; desired_rate :: Stored IFloat
  ; alt_error :: Stored IFloat
  ; target_rate :: Stored IFloat
  ; current_rate :: Stored IFloat
  ; error_rate :: Stored IFloat
  ; target_accel :: Stored IFloat
  ; angle_boost :: Stored IFloat
  }
|]

mkAltHoldDebugSender ::
  Def ('[ ConstRef s0 (Struct "alt_hold_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAltHoldDebugSender =
  proc "mavlink_alt_hold_debug_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 52 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> throttle_cruise)
  call_ pack buf 4 =<< deref (msg ~> throttle_avg)
  call_ pack buf 8 =<< deref (msg ~> target_alt)
  call_ pack buf 12 =<< deref (msg ~> rate_filter)
  call_ pack buf 16 =<< deref (msg ~> accel_filter)
  call_ pack buf 20 =<< deref (msg ~> speed_filter)
  call_ pack buf 24 =<< deref (msg ~> desired_rate)
  call_ pack buf 28 =<< deref (msg ~> alt_error)
  call_ pack buf 32 =<< deref (msg ~> target_rate)
  call_ pack buf 36 =<< deref (msg ~> current_rate)
  call_ pack buf 40 =<< deref (msg ~> error_rate)
  call_ pack buf 44 =<< deref (msg ~> target_accel)
  call_ pack buf 48 =<< deref (msg ~> angle_boost)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 52 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "altHoldDebug payload of length 52 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    altHoldDebugMsgId
                    altHoldDebugCrcExtra
                    52
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "alt_hold_debug_msg" where
    unpackMsg = ( altHoldDebugUnpack , altHoldDebugMsgId )

altHoldDebugUnpack :: Def ('[ Ref s1 (Struct "alt_hold_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
altHoldDebugUnpack = proc "mavlink_alt_hold_debug_unpack" $ \ msg buf -> body $ do
  store (msg ~> throttle_cruise) =<< call unpack buf 0
  store (msg ~> throttle_avg) =<< call unpack buf 4
  store (msg ~> target_alt) =<< call unpack buf 8
  store (msg ~> rate_filter) =<< call unpack buf 12
  store (msg ~> accel_filter) =<< call unpack buf 16
  store (msg ~> speed_filter) =<< call unpack buf 20
  store (msg ~> desired_rate) =<< call unpack buf 24
  store (msg ~> alt_error) =<< call unpack buf 28
  store (msg ~> target_rate) =<< call unpack buf 32
  store (msg ~> current_rate) =<< call unpack buf 36
  store (msg ~> error_rate) =<< call unpack buf 40
  store (msg ~> target_accel) =<< call unpack buf 44
  store (msg ~> angle_boost) =<< call unpack buf 48

