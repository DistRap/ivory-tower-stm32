{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionRequestPartialList where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionRequestPartialListMsgId :: Uint8
missionRequestPartialListMsgId = 37

missionRequestPartialListCrcExtra :: Uint8
missionRequestPartialListCrcExtra = 212

missionRequestPartialListModule :: Module
missionRequestPartialListModule = package "mavlink_mission_request_partial_list_msg" $ do
  depend packModule
  incl missionRequestPartialListUnpack
  defStruct (Proxy :: Proxy "mission_request_partial_list_msg")

[ivory|
struct mission_request_partial_list_msg
  { start_index :: Stored Sint16
  ; end_index :: Stored Sint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionRequestPartialListSender :: SizedMavlinkSender 6
                       -> Def ('[ ConstRef s (Struct "mission_request_partial_list_msg") ] :-> ())
mkMissionRequestPartialListSender sender =
  proc ("mavlink_mission_request_partial_list_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionRequestPartialListPack (senderMacro sender) msg

instance MavlinkSendable "mission_request_partial_list_msg" 6 where
  mkSender = mkMissionRequestPartialListSender

missionRequestPartialListPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 6
                  -> ConstRef s1 (Struct "mission_request_partial_list_msg")
                  -> Ivory eff ()
missionRequestPartialListPack sender msg = do
  arr <- local (iarray [] :: Init (Array 6 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> start_index)
  call_ pack buf 2 =<< deref (msg ~> end_index)
  call_ pack buf 4 =<< deref (msg ~> target_system)
  call_ pack buf 5 =<< deref (msg ~> target_component)
  sender missionRequestPartialListMsgId (constRef arr) missionRequestPartialListCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_request_partial_list_msg" where
    unpackMsg = ( missionRequestPartialListUnpack , missionRequestPartialListMsgId )

missionRequestPartialListUnpack :: Def ('[ Ref s1 (Struct "mission_request_partial_list_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionRequestPartialListUnpack = proc "mavlink_mission_request_partial_list_unpack" $ \ msg buf -> body $ do
  store (msg ~> start_index) =<< call unpack buf 0
  store (msg ~> end_index) =<< call unpack buf 2
  store (msg ~> target_system) =<< call unpack buf 4
  store (msg ~> target_component) =<< call unpack buf 5

