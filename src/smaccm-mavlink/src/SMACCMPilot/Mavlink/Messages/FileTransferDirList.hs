{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.FileTransferDirList where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

fileTransferDirListMsgId :: Uint8
fileTransferDirListMsgId = 111

fileTransferDirListCrcExtra :: Uint8
fileTransferDirListCrcExtra = 93

fileTransferDirListModule :: Module
fileTransferDirListModule = package "mavlink_file_transfer_dir_list_msg" $ do
  depend packModule
  incl fileTransferDirListUnpack
  defStruct (Proxy :: Proxy "file_transfer_dir_list_msg")

[ivory|
struct file_transfer_dir_list_msg
  { transfer_uid :: Stored Uint64
  ; flags :: Stored Uint8
  ; dir_path :: Array 240 (Stored Uint8)
  }
|]

mkFileTransferDirListSender :: SizedMavlinkSender 249
                       -> Def ('[ ConstRef s (Struct "file_transfer_dir_list_msg") ] :-> ())
mkFileTransferDirListSender sender =
  proc ("mavlink_file_transfer_dir_list_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    fileTransferDirListPack (senderMacro sender) msg

instance MavlinkSendable "file_transfer_dir_list_msg" 249 where
  mkSender = mkFileTransferDirListSender

fileTransferDirListPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 249
                  -> ConstRef s1 (Struct "file_transfer_dir_list_msg")
                  -> Ivory eff ()
fileTransferDirListPack sender msg = do
  arr <- local (iarray [] :: Init (Array 249 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> transfer_uid)
  call_ pack buf 248 =<< deref (msg ~> flags)
  arrayPack buf 8 (msg ~> dir_path)
  sender fileTransferDirListMsgId (constRef arr) fileTransferDirListCrcExtra
  retVoid

instance MavlinkUnpackableMsg "file_transfer_dir_list_msg" where
    unpackMsg = ( fileTransferDirListUnpack , fileTransferDirListMsgId )

fileTransferDirListUnpack :: Def ('[ Ref s1 (Struct "file_transfer_dir_list_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
fileTransferDirListUnpack = proc "mavlink_file_transfer_dir_list_unpack" $ \ msg buf -> body $ do
  store (msg ~> transfer_uid) =<< call unpack buf 0
  store (msg ~> flags) =<< call unpack buf 248
  arrayUnpack buf 8 (msg ~> dir_path)

