{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.PosCtlDebug where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

posCtlDebugMsgId :: Uint8
posCtlDebugMsgId = 187

posCtlDebugCrcExtra :: Uint8
posCtlDebugCrcExtra = 23

posCtlDebugModule :: Module
posCtlDebugModule = package "mavlink_pos_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkPosCtlDebugSender
  incl posCtlDebugUnpack
  defStruct (Proxy :: Proxy "pos_ctl_debug_msg")

[ivory|
struct pos_ctl_debug_msg
  { x_vel_setpt :: Stored IFloat
  ; y_vel_setpt :: Stored IFloat
  ; head_setpt :: Stored IFloat
  ; lat_setpt :: Stored Sint32
  ; lon_setpt :: Stored Sint32
  ; x_deviation :: Stored IFloat
  ; y_deviation :: Stored IFloat
  ; x_vel_est :: Stored IFloat
  ; x_vel_p :: Stored IFloat
  ; x_vel_i :: Stored IFloat
  ; x_vel_d :: Stored IFloat
  ; y_vel_est :: Stored IFloat
  ; y_vel_p :: Stored IFloat
  ; y_vel_i :: Stored IFloat
  ; y_vel_d :: Stored IFloat
  }
|]

mkPosCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "pos_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkPosCtlDebugSender =
  proc "mavlink_pos_ctl_debug_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 60 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> x_vel_setpt)
  pack buf 4 =<< deref (msg ~> y_vel_setpt)
  pack buf 8 =<< deref (msg ~> head_setpt)
  pack buf 12 =<< deref (msg ~> lat_setpt)
  pack buf 16 =<< deref (msg ~> lon_setpt)
  pack buf 20 =<< deref (msg ~> x_deviation)
  pack buf 24 =<< deref (msg ~> y_deviation)
  pack buf 28 =<< deref (msg ~> x_vel_est)
  pack buf 32 =<< deref (msg ~> x_vel_p)
  pack buf 36 =<< deref (msg ~> x_vel_i)
  pack buf 40 =<< deref (msg ~> x_vel_d)
  pack buf 44 =<< deref (msg ~> y_vel_est)
  pack buf 48 =<< deref (msg ~> y_vel_p)
  pack buf 52 =<< deref (msg ~> y_vel_i)
  pack buf 56 =<< deref (msg ~> y_vel_d)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 60 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "posCtlDebug payload of length 60 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    posCtlDebugMsgId
                    posCtlDebugCrcExtra
                    60
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "pos_ctl_debug_msg" where
    unpackMsg = ( posCtlDebugUnpack , posCtlDebugMsgId )

posCtlDebugUnpack :: Def ('[ Ref s1 (Struct "pos_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
posCtlDebugUnpack = proc "mavlink_pos_ctl_debug_unpack" $ \ msg buf -> body $ do
  store (msg ~> x_vel_setpt) =<< unpack buf 0
  store (msg ~> y_vel_setpt) =<< unpack buf 4
  store (msg ~> head_setpt) =<< unpack buf 8
  store (msg ~> lat_setpt) =<< unpack buf 12
  store (msg ~> lon_setpt) =<< unpack buf 16
  store (msg ~> x_deviation) =<< unpack buf 20
  store (msg ~> y_deviation) =<< unpack buf 24
  store (msg ~> x_vel_est) =<< unpack buf 28
  store (msg ~> x_vel_p) =<< unpack buf 32
  store (msg ~> x_vel_i) =<< unpack buf 36
  store (msg ~> x_vel_d) =<< unpack buf 40
  store (msg ~> y_vel_est) =<< unpack buf 44
  store (msg ~> y_vel_p) =<< unpack buf 48
  store (msg ~> y_vel_i) =<< unpack buf 52
  store (msg ~> y_vel_d) =<< unpack buf 56

