{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetMode where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

setModeMsgId :: Uint8
setModeMsgId = 11

setModeCrcExtra :: Uint8
setModeCrcExtra = 89

setModeModule :: Module
setModeModule = package "mavlink_set_mode_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetModeSender
  incl setModeUnpack
  defStruct (Proxy :: Proxy "set_mode_msg")

[ivory|
struct set_mode_msg
  { custom_mode :: Stored Uint32
  ; target_system :: Stored Uint8
  ; base_mode :: Stored Uint8
  }
|]

mkSetModeSender ::
  Def ('[ ConstRef s0 (Struct "set_mode_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetModeSender =
  proc "mavlink_set_mode_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 6 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> custom_mode)
  pack buf 4 =<< deref (msg ~> target_system)
  pack buf 5 =<< deref (msg ~> base_mode)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 6 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "setMode payload of length 6 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    setModeMsgId
                    setModeCrcExtra
                    6
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "set_mode_msg" where
    unpackMsg = ( setModeUnpack , setModeMsgId )

setModeUnpack :: Def ('[ Ref s1 (Struct "set_mode_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setModeUnpack = proc "mavlink_set_mode_unpack" $ \ msg buf -> body $ do
  store (msg ~> custom_mode) =<< unpack buf 0
  store (msg ~> target_system) =<< unpack buf 4
  store (msg ~> base_mode) =<< unpack buf 5

