{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Data32 where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

data32MsgId :: Uint8
data32MsgId = 170

data32CrcExtra :: Uint8
data32CrcExtra = 240

data32Module :: Module
data32Module = package "mavlink_data32_msg" $ do
  depend packModule
  incl data32Unpack
  defStruct (Proxy :: Proxy "data32_msg")

[ivory|
struct data32_msg
  { data32_type :: Stored Uint8
  ; len :: Stored Uint8
  ; data32 :: Array 32 (Stored Uint8)
  }
|]

mkData32Sender :: SizedMavlinkSender 34
                       -> Def ('[ ConstRef s (Struct "data32_msg") ] :-> ())
mkData32Sender sender =
  proc ("mavlink_data32_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    noReturn $ data32Pack (senderMacro sender) msg

instance MavlinkSendable "data32_msg" 34 where
  mkSender = mkData32Sender

data32Pack :: SenderMacro cs (Stack cs) 34
                  -> ConstRef s1 (Struct "data32_msg")
                  -> Ivory (AllocEffects cs) ()
data32Pack sender msg = do
  arr <- local (iarray [] :: Init (Array 34 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> data32_type)
  call_ pack buf 1 =<< deref (msg ~> len)
  arrayPack buf 2 (msg ~> data32)
  sender data32MsgId (constRef arr) data32CrcExtra

instance MavlinkUnpackableMsg "data32_msg" where
    unpackMsg = ( data32Unpack , data32MsgId )

data32Unpack :: Def ('[ Ref s1 (Struct "data32_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
data32Unpack = proc "mavlink_data32_unpack" $ \ msg buf -> body $ do
  store (msg ~> data32_type) =<< call unpack buf 0
  store (msg ~> len) =<< call unpack buf 1
  arrayUnpack buf 2 (msg ~> data32)

