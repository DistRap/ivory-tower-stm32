{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionClearAll where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionClearAllMsgId :: Uint8
missionClearAllMsgId = 45

missionClearAllCrcExtra :: Uint8
missionClearAllCrcExtra = 232

missionClearAllModule :: Module
missionClearAllModule = package "mavlink_mission_clear_all_msg" $ do
  depend packModule
  incl missionClearAllUnpack
  defStruct (Proxy :: Proxy "mission_clear_all_msg")

[ivory|
struct mission_clear_all_msg
  { target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionClearAllSender :: SizedMavlinkSender 2
                       -> Def ('[ ConstRef s (Struct "mission_clear_all_msg") ] :-> ())
mkMissionClearAllSender sender =
  proc ("mavlink_mission_clear_all_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionClearAllPack (senderMacro sender) msg

instance MavlinkSendable "mission_clear_all_msg" 2 where
  mkSender = mkMissionClearAllSender

missionClearAllPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 2
                  -> ConstRef s1 (Struct "mission_clear_all_msg")
                  -> Ivory eff ()
missionClearAllPack sender msg = do
  arr <- local (iarray [] :: Init (Array 2 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> target_system)
  call_ pack buf 1 =<< deref (msg ~> target_component)
  sender missionClearAllMsgId (constRef arr) missionClearAllCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_clear_all_msg" where
    unpackMsg = ( missionClearAllUnpack , missionClearAllMsgId )

missionClearAllUnpack :: Def ('[ Ref s1 (Struct "mission_clear_all_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionClearAllUnpack = proc "mavlink_mission_clear_all_unpack" $ \ msg buf -> body $ do
  store (msg ~> target_system) =<< call unpack buf 0
  store (msg ~> target_component) =<< call unpack buf 1

