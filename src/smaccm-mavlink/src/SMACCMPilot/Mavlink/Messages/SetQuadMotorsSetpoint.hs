{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetQuadMotorsSetpoint where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send
import qualified SMACCMPilot.Communications as Comm

import Ivory.Language
import Ivory.Stdlib

setQuadMotorsSetpointMsgId :: Uint8
setQuadMotorsSetpointMsgId = 60

setQuadMotorsSetpointCrcExtra :: Uint8
setQuadMotorsSetpointCrcExtra = 30

setQuadMotorsSetpointModule :: Module
setQuadMotorsSetpointModule = package "mavlink_set_quad_motors_setpoint_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkSetQuadMotorsSetpointSender
  incl setQuadMotorsSetpointUnpack
  defStruct (Proxy :: Proxy "set_quad_motors_setpoint_msg")

[ivory|
struct set_quad_motors_setpoint_msg
  { motor_front_nw :: Stored Uint16
  ; motor_right_ne :: Stored Uint16
  ; motor_back_se :: Stored Uint16
  ; motor_left_sw :: Stored Uint16
  ; target_system :: Stored Uint8
  }
|]

mkSetQuadMotorsSetpointSender ::
  Def ('[ ConstRef s0 (Struct "set_quad_motors_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 Comm.MAVLinkArray -- tx buffer
        ] :-> ())
mkSetQuadMotorsSetpointSender =
  proc "mavlink_set_quad_motors_setpoint_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 9 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> motor_front_nw)
  call_ pack buf 2 =<< deref (msg ~> motor_right_ne)
  call_ pack buf 4 =<< deref (msg ~> motor_back_se)
  call_ pack buf 6 =<< deref (msg ~> motor_left_sw)
  call_ pack buf 8 =<< deref (msg ~> target_system)
  -- 6: header len, 2: CRC len
  let usedLen = 6 + 9 + 2 :: Integer
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "setQuadMotorsSetpoint payload of length 9 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    setQuadMotorsSetpointMsgId
                    setQuadMotorsSetpointCrcExtra
                    9
                    seqNum
                    sendArr
            let usedLenIx = fromInteger usedLen
            -- Zero out the unused portion of the array.
            for (fromInteger sendArrLen - usedLenIx) $ \ix ->
              store (sendArr ! (ix + usedLenIx)) 0
            retVoid

instance MavlinkUnpackableMsg "set_quad_motors_setpoint_msg" where
    unpackMsg = ( setQuadMotorsSetpointUnpack , setQuadMotorsSetpointMsgId )

setQuadMotorsSetpointUnpack :: Def ('[ Ref s1 (Struct "set_quad_motors_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setQuadMotorsSetpointUnpack = proc "mavlink_set_quad_motors_setpoint_unpack" $ \ msg buf -> body $ do
  store (msg ~> motor_front_nw) =<< call unpack buf 0
  store (msg ~> motor_right_ne) =<< call unpack buf 2
  store (msg ~> motor_back_se) =<< call unpack buf 4
  store (msg ~> motor_left_sw) =<< call unpack buf 6
  store (msg ~> target_system) =<< call unpack buf 8

