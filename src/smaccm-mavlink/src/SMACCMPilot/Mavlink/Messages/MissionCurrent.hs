{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionCurrent where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

missionCurrentMsgId :: Uint8
missionCurrentMsgId = 42

missionCurrentCrcExtra :: Uint8
missionCurrentCrcExtra = 28

missionCurrentModule :: Module
missionCurrentModule = package "mavlink_mission_current_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkMissionCurrentSender
  incl missionCurrentUnpack
  defStruct (Proxy :: Proxy "mission_current_msg")

[ivory|
struct mission_current_msg
  { mission_current_seq :: Stored Uint16
  }
|]

mkMissionCurrentSender ::
  Def ('[ ConstRef s0 (Struct "mission_current_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionCurrentSender =
  proc "mavlink_mission_current_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 2 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> mission_current_seq)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 2 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "missionCurrent payload of length 2 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    missionCurrentMsgId
                    missionCurrentCrcExtra
                    2
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "mission_current_msg" where
    unpackMsg = ( missionCurrentUnpack , missionCurrentMsgId )

missionCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionCurrentUnpack = proc "mavlink_mission_current_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_current_seq) =<< call unpack buf 0

