{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GlobalPositionInt where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

globalPositionIntMsgId :: Uint8
globalPositionIntMsgId = 33

globalPositionIntCrcExtra :: Uint8
globalPositionIntCrcExtra = 104

globalPositionIntModule :: Module
globalPositionIntModule = package "mavlink_global_position_int_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGlobalPositionIntSender
  incl globalPositionIntUnpack
  defStruct (Proxy :: Proxy "global_position_int_msg")

[ivory|
struct global_position_int_msg
  { time_boot_ms :: Stored Uint32
  ; lat :: Stored Sint32
  ; lon :: Stored Sint32
  ; alt :: Stored Sint32
  ; relative_alt :: Stored Sint32
  ; vx :: Stored Sint16
  ; vy :: Stored Sint16
  ; vz :: Stored Sint16
  ; hdg :: Stored Uint16
  }
|]

mkGlobalPositionIntSender ::
  Def ('[ ConstRef s0 (Struct "global_position_int_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGlobalPositionIntSender =
  proc "mavlink_global_position_int_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 28 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> time_boot_ms)
  pack buf 4 =<< deref (msg ~> lat)
  pack buf 8 =<< deref (msg ~> lon)
  pack buf 12 =<< deref (msg ~> alt)
  pack buf 16 =<< deref (msg ~> relative_alt)
  pack buf 20 =<< deref (msg ~> vx)
  pack buf 22 =<< deref (msg ~> vy)
  pack buf 24 =<< deref (msg ~> vz)
  pack buf 26 =<< deref (msg ~> hdg)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 28 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "globalPositionInt payload of length 28 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    globalPositionIntMsgId
                    globalPositionIntCrcExtra
                    28
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "global_position_int_msg" where
    unpackMsg = ( globalPositionIntUnpack , globalPositionIntMsgId )

globalPositionIntUnpack :: Def ('[ Ref s1 (Struct "global_position_int_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
globalPositionIntUnpack = proc "mavlink_global_position_int_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< unpack buf 0
  store (msg ~> lat) =<< unpack buf 4
  store (msg ~> lon) =<< unpack buf 8
  store (msg ~> alt) =<< unpack buf 12
  store (msg ~> relative_alt) =<< unpack buf 16
  store (msg ~> vx) =<< unpack buf 20
  store (msg ~> vy) =<< unpack buf 22
  store (msg ~> vz) =<< unpack buf 24
  store (msg ~> hdg) =<< unpack buf 26

