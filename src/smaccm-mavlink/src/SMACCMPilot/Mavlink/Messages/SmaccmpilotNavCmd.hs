{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SmaccmpilotNavCmd where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

smaccmpilotNavCmdMsgId :: Uint8
smaccmpilotNavCmdMsgId = 188

smaccmpilotNavCmdCrcExtra :: Uint8
smaccmpilotNavCmdCrcExtra = 96

smaccmpilotNavCmdModule :: Module
smaccmpilotNavCmdModule = package "mavlink_smaccmpilot_nav_cmd_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkSmaccmpilotNavCmdSender
  incl smaccmpilotNavCmdUnpack
  defStruct (Proxy :: Proxy "smaccmpilot_nav_cmd_msg")

[ivory|
struct smaccmpilot_nav_cmd_msg
  { alt_set :: Stored Sint32
  ; alt_rate_set :: Stored Sint32
  ; lat_set :: Stored Sint32
  ; lon_set :: Stored Sint32
  ; vel_x_set :: Stored Sint32
  ; vel_y_set :: Stored Sint32
  ; heading_set :: Stored Uint16
  ; autoland_active :: Stored Sint8
  ; autoland_complete :: Stored Sint8
  ; alt_set_valid :: Stored Sint8
  ; heading_set_valid :: Stored Sint8
  ; lat_lon_set_valid :: Stored Sint8
  ; vel_set_valid :: Stored Sint8
  }
|]

mkSmaccmpilotNavCmdSender ::
  Def ('[ ConstRef s0 (Struct "smaccmpilot_nav_cmd_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSmaccmpilotNavCmdSender =
  proc "mavlink_smaccmpilot_nav_cmd_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 32 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> alt_set)
  call_ pack buf 4 =<< deref (msg ~> alt_rate_set)
  call_ pack buf 8 =<< deref (msg ~> lat_set)
  call_ pack buf 12 =<< deref (msg ~> lon_set)
  call_ pack buf 16 =<< deref (msg ~> vel_x_set)
  call_ pack buf 20 =<< deref (msg ~> vel_y_set)
  call_ pack buf 24 =<< deref (msg ~> heading_set)
  call_ pack buf 26 =<< deref (msg ~> autoland_active)
  call_ pack buf 27 =<< deref (msg ~> autoland_complete)
  call_ pack buf 28 =<< deref (msg ~> alt_set_valid)
  call_ pack buf 29 =<< deref (msg ~> heading_set_valid)
  call_ pack buf 30 =<< deref (msg ~> lat_lon_set_valid)
  call_ pack buf 31 =<< deref (msg ~> vel_set_valid)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 32 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "smaccmpilotNavCmd payload of length 32 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    smaccmpilotNavCmdMsgId
                    smaccmpilotNavCmdCrcExtra
                    32
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "smaccmpilot_nav_cmd_msg" where
    unpackMsg = ( smaccmpilotNavCmdUnpack , smaccmpilotNavCmdMsgId )

smaccmpilotNavCmdUnpack :: Def ('[ Ref s1 (Struct "smaccmpilot_nav_cmd_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
smaccmpilotNavCmdUnpack = proc "mavlink_smaccmpilot_nav_cmd_unpack" $ \ msg buf -> body $ do
  store (msg ~> alt_set) =<< call unpack buf 0
  store (msg ~> alt_rate_set) =<< call unpack buf 4
  store (msg ~> lat_set) =<< call unpack buf 8
  store (msg ~> lon_set) =<< call unpack buf 12
  store (msg ~> vel_x_set) =<< call unpack buf 16
  store (msg ~> vel_y_set) =<< call unpack buf 20
  store (msg ~> heading_set) =<< call unpack buf 24
  store (msg ~> autoland_active) =<< call unpack buf 26
  store (msg ~> autoland_complete) =<< call unpack buf 27
  store (msg ~> alt_set_valid) =<< call unpack buf 28
  store (msg ~> heading_set_valid) =<< call unpack buf 29
  store (msg ~> lat_lon_set_valid) =<< call unpack buf 30
  store (msg ~> vel_set_valid) =<< call unpack buf 31

