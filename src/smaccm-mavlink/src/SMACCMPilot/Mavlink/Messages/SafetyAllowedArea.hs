{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.SafetyAllowedArea where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

safetyAllowedAreaMsgId :: Uint8
safetyAllowedAreaMsgId = 55

safetyAllowedAreaCrcExtra :: Uint8
safetyAllowedAreaCrcExtra = 3

safetyAllowedAreaModule :: Module
safetyAllowedAreaModule = package "mavlink_safety_allowed_area_msg" $ do
  depend packModule
  incl safetyAllowedAreaUnpack
  defStruct (Proxy :: Proxy "safety_allowed_area_msg")

[ivory|
struct safety_allowed_area_msg
  { p1x :: Stored IFloat
  ; p1y :: Stored IFloat
  ; p1z :: Stored IFloat
  ; p2x :: Stored IFloat
  ; p2y :: Stored IFloat
  ; p2z :: Stored IFloat
  ; frame :: Stored Uint8
  }
|]

mkSafetyAllowedAreaSender :: SizedMavlinkSender 25
                       -> Def ('[ ConstRef s (Struct "safety_allowed_area_msg") ] :-> ())
mkSafetyAllowedAreaSender sender =
  proc ("mavlink_safety_allowed_area_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    safetyAllowedAreaPack (senderMacro sender) msg

instance MavlinkSendable "safety_allowed_area_msg" 25 where
  mkSender = mkSafetyAllowedAreaSender

safetyAllowedAreaPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 25
                  -> ConstRef s1 (Struct "safety_allowed_area_msg")
                  -> Ivory eff ()
safetyAllowedAreaPack sender msg = do
  arr <- local (iarray [] :: Init (Array 25 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> p1x)
  call_ pack buf 4 =<< deref (msg ~> p1y)
  call_ pack buf 8 =<< deref (msg ~> p1z)
  call_ pack buf 12 =<< deref (msg ~> p2x)
  call_ pack buf 16 =<< deref (msg ~> p2y)
  call_ pack buf 20 =<< deref (msg ~> p2z)
  call_ pack buf 24 =<< deref (msg ~> frame)
  sender safetyAllowedAreaMsgId (constRef arr) safetyAllowedAreaCrcExtra
  retVoid

instance MavlinkUnpackableMsg "safety_allowed_area_msg" where
    unpackMsg = ( safetyAllowedAreaUnpack , safetyAllowedAreaMsgId )

safetyAllowedAreaUnpack :: Def ('[ Ref s1 (Struct "safety_allowed_area_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
safetyAllowedAreaUnpack = proc "mavlink_safety_allowed_area_unpack" $ \ msg buf -> body $ do
  store (msg ~> p1x) =<< call unpack buf 0
  store (msg ~> p1y) =<< call unpack buf 4
  store (msg ~> p1z) =<< call unpack buf 8
  store (msg ~> p2x) =<< call unpack buf 12
  store (msg ~> p2y) =<< call unpack buf 16
  store (msg ~> p2z) =<< call unpack buf 20
  store (msg ~> frame) =<< call unpack buf 24

