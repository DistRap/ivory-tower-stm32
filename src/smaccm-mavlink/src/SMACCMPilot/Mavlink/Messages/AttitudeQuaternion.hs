{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AttitudeQuaternion where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send
import qualified SMACCMPilot.Shared as S

import Ivory.Language
import Ivory.Stdlib

attitudeQuaternionMsgId :: Uint8
attitudeQuaternionMsgId = 31

attitudeQuaternionCrcExtra :: Uint8
attitudeQuaternionCrcExtra = 246

attitudeQuaternionModule :: Module
attitudeQuaternionModule = package "mavlink_attitude_quaternion_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkAttitudeQuaternionSender
  incl attitudeQuaternionUnpack
  defStruct (Proxy :: Proxy "attitude_quaternion_msg")

[ivory|
struct attitude_quaternion_msg
  { time_boot_ms :: Stored Uint32
  ; q1 :: Stored IFloat
  ; q2 :: Stored IFloat
  ; q3 :: Stored IFloat
  ; q4 :: Stored IFloat
  ; rollspeed :: Stored IFloat
  ; pitchspeed :: Stored IFloat
  ; yawspeed :: Stored IFloat
  }
|]

mkAttitudeQuaternionSender ::
  Def ('[ ConstRef s0 (Struct "attitude_quaternion_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 S.MavLinkArray -- tx buffer
        ] :-> ())
mkAttitudeQuaternionSender =
  proc "mavlink_attitude_quaternion_msg_send"
  $ \msg seqNum sendArr -> body
  $ do
  arr <- local (iarray [] :: Init (Array 32 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_boot_ms)
  call_ pack buf 4 =<< deref (msg ~> q1)
  call_ pack buf 8 =<< deref (msg ~> q2)
  call_ pack buf 12 =<< deref (msg ~> q3)
  call_ pack buf 16 =<< deref (msg ~> q4)
  call_ pack buf 20 =<< deref (msg ~> rollspeed)
  call_ pack buf 24 =<< deref (msg ~> pitchspeed)
  call_ pack buf 28 =<< deref (msg ~> yawspeed)
  -- 6: header len, 2: CRC len
  let usedLen = 6 + 32 + 2 :: Integer
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "attitudeQuaternion payload of length 32 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    attitudeQuaternionMsgId
                    attitudeQuaternionCrcExtra
                    32
                    seqNum
                    sendArr
            let usedLenIx = fromInteger usedLen
            -- Zero out the unused portion of the array.
            for (fromInteger sendArrLen - usedLenIx) $ \ix ->
              store (sendArr ! (ix + usedLenIx)) 0
            retVoid

instance MavlinkUnpackableMsg "attitude_quaternion_msg" where
    unpackMsg = ( attitudeQuaternionUnpack , attitudeQuaternionMsgId )

attitudeQuaternionUnpack :: Def ('[ Ref s1 (Struct "attitude_quaternion_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attitudeQuaternionUnpack = proc "mavlink_attitude_quaternion_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< call unpack buf 0
  store (msg ~> q1) =<< call unpack buf 4
  store (msg ~> q2) =<< call unpack buf 8
  store (msg ~> q3) =<< call unpack buf 12
  store (msg ~> q4) =<< call unpack buf 16
  store (msg ~> rollspeed) =<< call unpack buf 20
  store (msg ~> pitchspeed) =<< call unpack buf 24
  store (msg ~> yawspeed) =<< call unpack buf 28

