{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AttCtlDebug where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

attCtlDebugMsgId :: Uint8
attCtlDebugMsgId = 186

attCtlDebugCrcExtra :: Uint8
attCtlDebugCrcExtra = 187

attCtlDebugModule :: Module
attCtlDebugModule = package "mavlink_att_ctl_debug_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkAttCtlDebugSender
  incl attCtlDebugUnpack
  defStruct (Proxy :: Proxy "att_ctl_debug_msg")

[ivory|
struct att_ctl_debug_msg
  { head_setpt :: Stored IFloat
  ; head_rate_setpt :: Stored IFloat
  ; head_ctl_p :: Stored IFloat
  ; head_ctl_d :: Stored IFloat
  ; pitch_setpt :: Stored IFloat
  ; pitch_rate_setpt :: Stored IFloat
  ; roll_setpt :: Stored IFloat
  ; roll_rate_setpt :: Stored IFloat
  }
|]

mkAttCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "att_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttCtlDebugSender =
  proc "mavlink_att_ctl_debug_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 32 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> head_setpt)
  call_ pack buf 4 =<< deref (msg ~> head_rate_setpt)
  call_ pack buf 8 =<< deref (msg ~> head_ctl_p)
  call_ pack buf 12 =<< deref (msg ~> head_ctl_d)
  call_ pack buf 16 =<< deref (msg ~> pitch_setpt)
  call_ pack buf 20 =<< deref (msg ~> pitch_rate_setpt)
  call_ pack buf 24 =<< deref (msg ~> roll_setpt)
  call_ pack buf 28 =<< deref (msg ~> roll_rate_setpt)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 32 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "attCtlDebug payload of length 32 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    attCtlDebugMsgId
                    attCtlDebugCrcExtra
                    32
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "att_ctl_debug_msg" where
    unpackMsg = ( attCtlDebugUnpack , attCtlDebugMsgId )

attCtlDebugUnpack :: Def ('[ Ref s1 (Struct "att_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attCtlDebugUnpack = proc "mavlink_att_ctl_debug_unpack" $ \ msg buf -> body $ do
  store (msg ~> head_setpt) =<< call unpack buf 0
  store (msg ~> head_rate_setpt) =<< call unpack buf 4
  store (msg ~> head_ctl_p) =<< call unpack buf 8
  store (msg ~> head_ctl_d) =<< call unpack buf 12
  store (msg ~> pitch_setpt) =<< call unpack buf 16
  store (msg ~> pitch_rate_setpt) =<< call unpack buf 20
  store (msg ~> roll_setpt) =<< call unpack buf 24
  store (msg ~> roll_rate_setpt) =<< call unpack buf 28

