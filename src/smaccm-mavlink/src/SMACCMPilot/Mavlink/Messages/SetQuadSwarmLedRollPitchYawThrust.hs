{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetQuadSwarmLedRollPitchYawThrust where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

setQuadSwarmLedRollPitchYawThrustMsgId :: Uint8
setQuadSwarmLedRollPitchYawThrustMsgId = 63

setQuadSwarmLedRollPitchYawThrustCrcExtra :: Uint8
setQuadSwarmLedRollPitchYawThrustCrcExtra = 130

setQuadSwarmLedRollPitchYawThrustModule :: Module
setQuadSwarmLedRollPitchYawThrustModule = package "mavlink_set_quad_swarm_led_roll_pitch_yaw_thrust_msg" $ do
  depend packModule
  depend mavlinkSendModule
  incl mkSetQuadSwarmLedRollPitchYawThrustSender
  incl setQuadSwarmLedRollPitchYawThrustUnpack
  defStruct (Proxy :: Proxy "set_quad_swarm_led_roll_pitch_yaw_thrust_msg")

[ivory|
struct set_quad_swarm_led_roll_pitch_yaw_thrust_msg
  { group :: Stored Uint8
  ; mode :: Stored Uint8
  ; roll :: Array 4 (Stored Sint16)
  ; pitch :: Array 4 (Stored Sint16)
  ; yaw :: Array 4 (Stored Sint16)
  ; thrust :: Array 4 (Stored Uint16)
  ; led_red :: Array 4 (Stored Uint8)
  ; led_blue :: Array 4 (Stored Uint8)
  ; led_green :: Array 4 (Stored Uint8)
  }
|]

mkSetQuadSwarmLedRollPitchYawThrustSender ::
  Def ('[ ConstRef s0 (Struct "set_quad_swarm_led_roll_pitch_yaw_thrust_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetQuadSwarmLedRollPitchYawThrustSender =
  proc "mavlink_set_quad_swarm_led_roll_pitch_yaw_thrust_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 46 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 32 =<< deref (msg ~> group)
  call_ pack buf 33 =<< deref (msg ~> mode)
  arrayPack buf 0 (msg ~> roll)
  arrayPack buf 8 (msg ~> pitch)
  arrayPack buf 16 (msg ~> yaw)
  arrayPack buf 24 (msg ~> thrust)
  arrayPack buf 34 (msg ~> led_red)
  arrayPack buf 38 (msg ~> led_blue)
  arrayPack buf 42 (msg ~> led_green)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 46 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "setQuadSwarmLedRollPitchYawThrust payload of length 46 is too large!"
    else do -- Copy, leaving room for the payload
            arrCopy sendArr arr 6
            call_ mavlinkSendWithWriter
                    setQuadSwarmLedRollPitchYawThrustMsgId
                    setQuadSwarmLedRollPitchYawThrustCrcExtra
                    46
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "set_quad_swarm_led_roll_pitch_yaw_thrust_msg" where
    unpackMsg = ( setQuadSwarmLedRollPitchYawThrustUnpack , setQuadSwarmLedRollPitchYawThrustMsgId )

setQuadSwarmLedRollPitchYawThrustUnpack :: Def ('[ Ref s1 (Struct "set_quad_swarm_led_roll_pitch_yaw_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setQuadSwarmLedRollPitchYawThrustUnpack = proc "mavlink_set_quad_swarm_led_roll_pitch_yaw_thrust_unpack" $ \ msg buf -> body $ do
  store (msg ~> group) =<< call unpack buf 32
  store (msg ~> mode) =<< call unpack buf 33
  arrayUnpack buf 0 (msg ~> roll)
  arrayUnpack buf 8 (msg ~> pitch)
  arrayUnpack buf 16 (msg ~> yaw)
  arrayUnpack buf 24 (msg ~> thrust)
  arrayUnpack buf 34 (msg ~> led_red)
  arrayUnpack buf 38 (msg ~> led_blue)
  arrayUnpack buf 42 (msg ~> led_green)

