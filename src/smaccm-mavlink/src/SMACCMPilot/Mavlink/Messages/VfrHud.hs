{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VfrHud where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

vfrHudMsgId :: Uint8
vfrHudMsgId = 74

vfrHudCrcExtra :: Uint8
vfrHudCrcExtra = 20

vfrHudModule :: Module
vfrHudModule = package "mavlink_vfr_hud_msg" $ do
  depend packModule
  incl vfrHudUnpack
  defStruct (Proxy :: Proxy "vfr_hud_msg")

[ivory|
struct vfr_hud_msg
  { airspeed :: Stored IFloat
  ; groundspeed :: Stored IFloat
  ; alt :: Stored IFloat
  ; climb :: Stored IFloat
  ; heading :: Stored Sint16
  ; throttle :: Stored Uint16
  }
|]

mkVfrHudSender :: SizedMavlinkSender 20
                       -> Def ('[ ConstRef s (Struct "vfr_hud_msg") ] :-> ())
mkVfrHudSender sender =
  proc ("mavlink_vfr_hud_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    vfrHudPack (senderMacro sender) msg

instance MavlinkSendable "vfr_hud_msg" 20 where
  mkSender = mkVfrHudSender

vfrHudPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 20
                  -> ConstRef s1 (Struct "vfr_hud_msg")
                  -> Ivory eff ()
vfrHudPack sender msg = do
  arr <- local (iarray [] :: Init (Array 20 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> airspeed)
  call_ pack buf 4 =<< deref (msg ~> groundspeed)
  call_ pack buf 8 =<< deref (msg ~> alt)
  call_ pack buf 12 =<< deref (msg ~> climb)
  call_ pack buf 16 =<< deref (msg ~> heading)
  call_ pack buf 18 =<< deref (msg ~> throttle)
  sender vfrHudMsgId (constRef arr) vfrHudCrcExtra
  retVoid

instance MavlinkUnpackableMsg "vfr_hud_msg" where
    unpackMsg = ( vfrHudUnpack , vfrHudMsgId )

vfrHudUnpack :: Def ('[ Ref s1 (Struct "vfr_hud_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vfrHudUnpack = proc "mavlink_vfr_hud_unpack" $ \ msg buf -> body $ do
  store (msg ~> airspeed) =<< call unpack buf 0
  store (msg ~> groundspeed) =<< call unpack buf 4
  store (msg ~> alt) =<< call unpack buf 8
  store (msg ~> climb) =<< call unpack buf 12
  store (msg ~> heading) =<< call unpack buf 16
  store (msg ~> throttle) =<< call unpack buf 18

