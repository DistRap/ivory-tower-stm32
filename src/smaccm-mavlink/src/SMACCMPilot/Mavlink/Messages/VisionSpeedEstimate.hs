{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VisionSpeedEstimate where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

visionSpeedEstimateMsgId :: Uint8
visionSpeedEstimateMsgId = 103

visionSpeedEstimateCrcExtra :: Uint8
visionSpeedEstimateCrcExtra = 208

visionSpeedEstimateModule :: Module
visionSpeedEstimateModule = package "mavlink_vision_speed_estimate_msg" $ do
  depend packModule
  incl visionSpeedEstimateUnpack
  defStruct (Proxy :: Proxy "vision_speed_estimate_msg")

[ivory|
struct vision_speed_estimate_msg
  { usec :: Stored Uint64
  ; x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  }
|]

mkVisionSpeedEstimateSender :: SizedMavlinkSender 20
                       -> Def ('[ ConstRef s (Struct "vision_speed_estimate_msg") ] :-> ())
mkVisionSpeedEstimateSender sender =
  proc ("mavlink_vision_speed_estimate_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    visionSpeedEstimatePack (senderMacro sender) msg

instance MavlinkSendable "vision_speed_estimate_msg" 20 where
  mkSender = mkVisionSpeedEstimateSender

visionSpeedEstimatePack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 20
                  -> ConstRef s1 (Struct "vision_speed_estimate_msg")
                  -> Ivory eff ()
visionSpeedEstimatePack sender msg = do
  arr <- local (iarray [] :: Init (Array 20 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> usec)
  call_ pack buf 8 =<< deref (msg ~> x)
  call_ pack buf 12 =<< deref (msg ~> y)
  call_ pack buf 16 =<< deref (msg ~> z)
  sender visionSpeedEstimateMsgId (constRef arr) visionSpeedEstimateCrcExtra
  retVoid

instance MavlinkUnpackableMsg "vision_speed_estimate_msg" where
    unpackMsg = ( visionSpeedEstimateUnpack , visionSpeedEstimateMsgId )

visionSpeedEstimateUnpack :: Def ('[ Ref s1 (Struct "vision_speed_estimate_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
visionSpeedEstimateUnpack = proc "mavlink_vision_speed_estimate_unpack" $ \ msg buf -> body $ do
  store (msg ~> usec) =<< call unpack buf 0
  store (msg ~> x) =<< call unpack buf 8
  store (msg ~> y) =<< call unpack buf 12
  store (msg ~> z) =<< call unpack buf 16

