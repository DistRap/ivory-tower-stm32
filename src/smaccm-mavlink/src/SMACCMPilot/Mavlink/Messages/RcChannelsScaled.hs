{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsScaled where

import Ivory.Serialize
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language
import Ivory.Stdlib

rcChannelsScaledMsgId :: Uint8
rcChannelsScaledMsgId = 34

rcChannelsScaledCrcExtra :: Uint8
rcChannelsScaledCrcExtra = 237

rcChannelsScaledModule :: Module
rcChannelsScaledModule = package "mavlink_rc_channels_scaled_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRcChannelsScaledSender
  incl rcChannelsScaledUnpack
  defStruct (Proxy :: Proxy "rc_channels_scaled_msg")

[ivory|
struct rc_channels_scaled_msg
  { time_boot_ms :: Stored Uint32
  ; chan1_scaled :: Stored Sint16
  ; chan2_scaled :: Stored Sint16
  ; chan3_scaled :: Stored Sint16
  ; chan4_scaled :: Stored Sint16
  ; chan5_scaled :: Stored Sint16
  ; chan6_scaled :: Stored Sint16
  ; chan7_scaled :: Stored Sint16
  ; chan8_scaled :: Stored Sint16
  ; port :: Stored Uint8
  ; rssi :: Stored Uint8
  }
|]

mkRcChannelsScaledSender ::
  Def ('[ ConstRef s0 (Struct "rc_channels_scaled_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRcChannelsScaledSender =
  proc "mavlink_rc_channels_scaled_msg_send"
  $ \msg seqNum sendStruct -> body
  $ do
  arr <- local (iarray [] :: Init (Array 22 (Stored Uint8)))
  let buf = toCArray arr
  pack buf 0 =<< deref (msg ~> time_boot_ms)
  pack buf 4 =<< deref (msg ~> chan1_scaled)
  pack buf 6 =<< deref (msg ~> chan2_scaled)
  pack buf 8 =<< deref (msg ~> chan3_scaled)
  pack buf 10 =<< deref (msg ~> chan4_scaled)
  pack buf 12 =<< deref (msg ~> chan5_scaled)
  pack buf 14 =<< deref (msg ~> chan6_scaled)
  pack buf 16 =<< deref (msg ~> chan7_scaled)
  pack buf 18 =<< deref (msg ~> chan8_scaled)
  pack buf 20 =<< deref (msg ~> port)
  pack buf 21 =<< deref (msg ~> rssi)
  -- 6: header len, 2: CRC len
  let usedLen    = 6 + 22 + 2 :: Integer
  let sendArr    = sendStruct ~> mav_array
  let sendArrLen = arrayLen sendArr
  if sendArrLen < usedLen
    then error "rcChannelsScaled payload of length 22 is too large!"
    else do -- Copy, leaving room for the payload
            arrayCopy sendArr arr 6 (arrayLen arr)
            call_ mavlinkSendWithWriter
                    rcChannelsScaledMsgId
                    rcChannelsScaledCrcExtra
                    22
                    seqNum
                    sendStruct

instance MavlinkUnpackableMsg "rc_channels_scaled_msg" where
    unpackMsg = ( rcChannelsScaledUnpack , rcChannelsScaledMsgId )

rcChannelsScaledUnpack :: Def ('[ Ref s1 (Struct "rc_channels_scaled_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsScaledUnpack = proc "mavlink_rc_channels_scaled_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< unpack buf 0
  store (msg ~> chan1_scaled) =<< unpack buf 4
  store (msg ~> chan2_scaled) =<< unpack buf 6
  store (msg ~> chan3_scaled) =<< unpack buf 8
  store (msg ~> chan4_scaled) =<< unpack buf 10
  store (msg ~> chan5_scaled) =<< unpack buf 12
  store (msg ~> chan6_scaled) =<< unpack buf 14
  store (msg ~> chan7_scaled) =<< unpack buf 16
  store (msg ~> chan8_scaled) =<< unpack buf 18
  store (msg ~> port) =<< unpack buf 20
  store (msg ~> rssi) =<< unpack buf 21

