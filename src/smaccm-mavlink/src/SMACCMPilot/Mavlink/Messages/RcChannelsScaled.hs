{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsScaled where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

rcChannelsScaledMsgId :: Uint8
rcChannelsScaledMsgId = 34

rcChannelsScaledCrcExtra :: Uint8
rcChannelsScaledCrcExtra = 237

rcChannelsScaledModule :: Module
rcChannelsScaledModule = package "mavlink_rc_channels_scaled_msg" $ do
  depend packModule
  incl rcChannelsScaledUnpack
  defStruct (Proxy :: Proxy "rc_channels_scaled_msg")

[ivory|
struct rc_channels_scaled_msg
  { time_boot_ms :: Stored Uint32
  ; chan1_scaled :: Stored Sint16
  ; chan2_scaled :: Stored Sint16
  ; chan3_scaled :: Stored Sint16
  ; chan4_scaled :: Stored Sint16
  ; chan5_scaled :: Stored Sint16
  ; chan6_scaled :: Stored Sint16
  ; chan7_scaled :: Stored Sint16
  ; chan8_scaled :: Stored Sint16
  ; port :: Stored Uint8
  ; rssi :: Stored Uint8
  }
|]

mkRcChannelsScaledSender :: SizedMavlinkSender 22
                       -> Def ('[ ConstRef s (Struct "rc_channels_scaled_msg") ] :-> ())
mkRcChannelsScaledSender sender =
  proc ("mavlink_rc_channels_scaled_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    rcChannelsScaledPack (senderMacro sender) msg

instance MavlinkSendable "rc_channels_scaled_msg" 22 where
  mkSender = mkRcChannelsScaledSender

rcChannelsScaledPack :: (GetAlloc eff ~ Scope s, GetReturn eff ~ Returns ())
                  => SenderMacro eff s 22
                  -> ConstRef s1 (Struct "rc_channels_scaled_msg")
                  -> Ivory eff ()
rcChannelsScaledPack sender msg = do
  arr <- local (iarray [] :: Init (Array 22 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_boot_ms)
  call_ pack buf 4 =<< deref (msg ~> chan1_scaled)
  call_ pack buf 6 =<< deref (msg ~> chan2_scaled)
  call_ pack buf 8 =<< deref (msg ~> chan3_scaled)
  call_ pack buf 10 =<< deref (msg ~> chan4_scaled)
  call_ pack buf 12 =<< deref (msg ~> chan5_scaled)
  call_ pack buf 14 =<< deref (msg ~> chan6_scaled)
  call_ pack buf 16 =<< deref (msg ~> chan7_scaled)
  call_ pack buf 18 =<< deref (msg ~> chan8_scaled)
  call_ pack buf 20 =<< deref (msg ~> port)
  call_ pack buf 21 =<< deref (msg ~> rssi)
  sender rcChannelsScaledMsgId (constRef arr) rcChannelsScaledCrcExtra
  retVoid

instance MavlinkUnpackableMsg "rc_channels_scaled_msg" where
    unpackMsg = ( rcChannelsScaledUnpack , rcChannelsScaledMsgId )

rcChannelsScaledUnpack :: Def ('[ Ref s1 (Struct "rc_channels_scaled_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsScaledUnpack = proc "mavlink_rc_channels_scaled_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< call unpack buf 0
  store (msg ~> chan1_scaled) =<< call unpack buf 4
  store (msg ~> chan2_scaled) =<< call unpack buf 6
  store (msg ~> chan3_scaled) =<< call unpack buf 8
  store (msg ~> chan4_scaled) =<< call unpack buf 10
  store (msg ~> chan5_scaled) =<< call unpack buf 12
  store (msg ~> chan6_scaled) =<< call unpack buf 14
  store (msg ~> chan7_scaled) =<< call unpack buf 16
  store (msg ~> chan8_scaled) =<< call unpack buf 18
  store (msg ~> port) =<< call unpack buf 20
  store (msg ~> rssi) =<< call unpack buf 21

