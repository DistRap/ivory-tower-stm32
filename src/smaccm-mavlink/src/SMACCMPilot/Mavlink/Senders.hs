{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE Rank2Types #-}

{- Module automatically generated by smavgen_ivory.py -}

module SMACCMPilot.Mavlink.Senders
  ( MavlinkMessageSenders(..)
  , mavlinkMessageSenders
  ) where

import Ivory.Language

import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Messages

data MavlinkMessageSenders =
  MavlinkMessageSenders
    { data16Sender :: forall s . Def ('[ ConstRef s (Struct "data16_msg") ] :->())
    , data32Sender :: forall s . Def ('[ ConstRef s (Struct "data32_msg") ] :->())
    , data64Sender :: forall s . Def ('[ ConstRef s (Struct "data64_msg") ] :->())
    , data96Sender :: forall s . Def ('[ ConstRef s (Struct "data96_msg") ] :->())
    , heartbeatSender :: forall s . Def ('[ ConstRef s (Struct "heartbeat_msg") ] :->())
    , sysStatusSender :: forall s . Def ('[ ConstRef s (Struct "sys_status_msg") ] :->())
    , systemTimeSender :: forall s . Def ('[ ConstRef s (Struct "system_time_msg") ] :->())
    , pingSender :: forall s . Def ('[ ConstRef s (Struct "ping_msg") ] :->())
    , changeOperatorControlSender :: forall s . Def ('[ ConstRef s (Struct "change_operator_control_msg") ] :->())
    , changeOperatorControlAckSender :: forall s . Def ('[ ConstRef s (Struct "change_operator_control_ack_msg") ] :->())
    , authKeySender :: forall s . Def ('[ ConstRef s (Struct "auth_key_msg") ] :->())
    , setModeSender :: forall s . Def ('[ ConstRef s (Struct "set_mode_msg") ] :->())
    , paramRequestReadSender :: forall s . Def ('[ ConstRef s (Struct "param_request_read_msg") ] :->())
    , paramRequestListSender :: forall s . Def ('[ ConstRef s (Struct "param_request_list_msg") ] :->())
    , paramValueSender :: forall s . Def ('[ ConstRef s (Struct "param_value_msg") ] :->())
    , paramSetSender :: forall s . Def ('[ ConstRef s (Struct "param_set_msg") ] :->())
    , gpsRawIntSender :: forall s . Def ('[ ConstRef s (Struct "gps_raw_int_msg") ] :->())
    , gpsStatusSender :: forall s . Def ('[ ConstRef s (Struct "gps_status_msg") ] :->())
    , scaledImuSender :: forall s . Def ('[ ConstRef s (Struct "scaled_imu_msg") ] :->())
    , rawImuSender :: forall s . Def ('[ ConstRef s (Struct "raw_imu_msg") ] :->())
    , rawPressureSender :: forall s . Def ('[ ConstRef s (Struct "raw_pressure_msg") ] :->())
    , scaledPressureSender :: forall s . Def ('[ ConstRef s (Struct "scaled_pressure_msg") ] :->())
    , attitudeSender :: forall s . Def ('[ ConstRef s (Struct "attitude_msg") ] :->())
    , attitudeQuaternionSender :: forall s . Def ('[ ConstRef s (Struct "attitude_quaternion_msg") ] :->())
    , localPositionNedSender :: forall s . Def ('[ ConstRef s (Struct "local_position_ned_msg") ] :->())
    , globalPositionIntSender :: forall s . Def ('[ ConstRef s (Struct "global_position_int_msg") ] :->())
    , rcChannelsScaledSender :: forall s . Def ('[ ConstRef s (Struct "rc_channels_scaled_msg") ] :->())
    , rcChannelsRawSender :: forall s . Def ('[ ConstRef s (Struct "rc_channels_raw_msg") ] :->())
    , servoOutputRawSender :: forall s . Def ('[ ConstRef s (Struct "servo_output_raw_msg") ] :->())
    , missionRequestPartialListSender :: forall s . Def ('[ ConstRef s (Struct "mission_request_partial_list_msg") ] :->())
    , missionWritePartialListSender :: forall s . Def ('[ ConstRef s (Struct "mission_write_partial_list_msg") ] :->())
    , missionItemSender :: forall s . Def ('[ ConstRef s (Struct "mission_item_msg") ] :->())
    , missionRequestSender :: forall s . Def ('[ ConstRef s (Struct "mission_request_msg") ] :->())
    , missionSetCurrentSender :: forall s . Def ('[ ConstRef s (Struct "mission_set_current_msg") ] :->())
    , missionCurrentSender :: forall s . Def ('[ ConstRef s (Struct "mission_current_msg") ] :->())
    , missionRequestListSender :: forall s . Def ('[ ConstRef s (Struct "mission_request_list_msg") ] :->())
    , missionCountSender :: forall s . Def ('[ ConstRef s (Struct "mission_count_msg") ] :->())
    , missionClearAllSender :: forall s . Def ('[ ConstRef s (Struct "mission_clear_all_msg") ] :->())
    , missionItemReachedSender :: forall s . Def ('[ ConstRef s (Struct "mission_item_reached_msg") ] :->())
    , missionAckSender :: forall s . Def ('[ ConstRef s (Struct "mission_ack_msg") ] :->())
    , setGpsGlobalOriginSender :: forall s . Def ('[ ConstRef s (Struct "set_gps_global_origin_msg") ] :->())
    , gpsGlobalOriginSender :: forall s . Def ('[ ConstRef s (Struct "gps_global_origin_msg") ] :->())
    , setLocalPositionSetpointSender :: forall s . Def ('[ ConstRef s (Struct "set_local_position_setpoint_msg") ] :->())
    , localPositionSetpointSender :: forall s . Def ('[ ConstRef s (Struct "local_position_setpoint_msg") ] :->())
    , globalPositionSetpointIntSender :: forall s . Def ('[ ConstRef s (Struct "global_position_setpoint_int_msg") ] :->())
    , setGlobalPositionSetpointIntSender :: forall s . Def ('[ ConstRef s (Struct "set_global_position_setpoint_int_msg") ] :->())
    , safetySetAllowedAreaSender :: forall s . Def ('[ ConstRef s (Struct "safety_set_allowed_area_msg") ] :->())
    , safetyAllowedAreaSender :: forall s . Def ('[ ConstRef s (Struct "safety_allowed_area_msg") ] :->())
    , setRollPitchYawThrustSender :: forall s . Def ('[ ConstRef s (Struct "set_roll_pitch_yaw_thrust_msg") ] :->())
    , setRollPitchYawSpeedThrustSender :: forall s . Def ('[ ConstRef s (Struct "set_roll_pitch_yaw_speed_thrust_msg") ] :->())
    , rollPitchYawThrustSetpointSender :: forall s . Def ('[ ConstRef s (Struct "roll_pitch_yaw_thrust_setpoint_msg") ] :->())
    , rollPitchYawSpeedThrustSetpointSender :: forall s . Def ('[ ConstRef s (Struct "roll_pitch_yaw_speed_thrust_setpoint_msg") ] :->())
    , setQuadMotorsSetpointSender :: forall s . Def ('[ ConstRef s (Struct "set_quad_motors_setpoint_msg") ] :->())
    , setQuadSwarmRollPitchYawThrustSender :: forall s . Def ('[ ConstRef s (Struct "set_quad_swarm_roll_pitch_yaw_thrust_msg") ] :->())
    , navControllerOutputSender :: forall s . Def ('[ ConstRef s (Struct "nav_controller_output_msg") ] :->())
    , setQuadSwarmLedRollPitchYawThrustSender :: forall s . Def ('[ ConstRef s (Struct "set_quad_swarm_led_roll_pitch_yaw_thrust_msg") ] :->())
    , stateCorrectionSender :: forall s . Def ('[ ConstRef s (Struct "state_correction_msg") ] :->())
    , requestDataStreamSender :: forall s . Def ('[ ConstRef s (Struct "request_data_stream_msg") ] :->())
    , dataStreamSender :: forall s . Def ('[ ConstRef s (Struct "data_stream_msg") ] :->())
    , manualControlSender :: forall s . Def ('[ ConstRef s (Struct "manual_control_msg") ] :->())
    , rcChannelsOverrideSender :: forall s . Def ('[ ConstRef s (Struct "rc_channels_override_msg") ] :->())
    , vfrHudSender :: forall s . Def ('[ ConstRef s (Struct "vfr_hud_msg") ] :->())
    , commandLongSender :: forall s . Def ('[ ConstRef s (Struct "command_long_msg") ] :->())
    , commandAckSender :: forall s . Def ('[ ConstRef s (Struct "command_ack_msg") ] :->())
    , rollPitchYawRatesThrustSetpointSender :: forall s . Def ('[ ConstRef s (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg") ] :->())
    , manualSetpointSender :: forall s . Def ('[ ConstRef s (Struct "manual_setpoint_msg") ] :->())
    , localPositionNedSystemGlobalOffsetSender :: forall s . Def ('[ ConstRef s (Struct "local_position_ned_system_global_offset_msg") ] :->())
    , hilStateSender :: forall s . Def ('[ ConstRef s (Struct "hil_state_msg") ] :->())
    , hilControlsSender :: forall s . Def ('[ ConstRef s (Struct "hil_controls_msg") ] :->())
    , hilRcInputsRawSender :: forall s . Def ('[ ConstRef s (Struct "hil_rc_inputs_raw_msg") ] :->())
    , opticalFlowSender :: forall s . Def ('[ ConstRef s (Struct "optical_flow_msg") ] :->())
    , globalVisionPositionEstimateSender :: forall s . Def ('[ ConstRef s (Struct "global_vision_position_estimate_msg") ] :->())
    , visionPositionEstimateSender :: forall s . Def ('[ ConstRef s (Struct "vision_position_estimate_msg") ] :->())
    , visionSpeedEstimateSender :: forall s . Def ('[ ConstRef s (Struct "vision_speed_estimate_msg") ] :->())
    , viconPositionEstimateSender :: forall s . Def ('[ ConstRef s (Struct "vicon_position_estimate_msg") ] :->())
    , highresImuSender :: forall s . Def ('[ ConstRef s (Struct "highres_imu_msg") ] :->())
    , fileTransferStartSender :: forall s . Def ('[ ConstRef s (Struct "file_transfer_start_msg") ] :->())
    , fileTransferDirListSender :: forall s . Def ('[ ConstRef s (Struct "file_transfer_dir_list_msg") ] :->())
    , fileTransferResSender :: forall s . Def ('[ ConstRef s (Struct "file_transfer_res_msg") ] :->())
    , batteryStatusSender :: forall s . Def ('[ ConstRef s (Struct "battery_status_msg") ] :->())
    , setpoint8dofSender :: forall s . Def ('[ ConstRef s (Struct "setpoint_8dof_msg") ] :->())
    , setpoint6dofSender :: forall s . Def ('[ ConstRef s (Struct "setpoint_6dof_msg") ] :->())
    , memoryVectSender :: forall s . Def ('[ ConstRef s (Struct "memory_vect_msg") ] :->())
    , debugVectSender :: forall s . Def ('[ ConstRef s (Struct "debug_vect_msg") ] :->())
    , namedValueFloatSender :: forall s . Def ('[ ConstRef s (Struct "named_value_float_msg") ] :->())
    , namedValueIntSender :: forall s . Def ('[ ConstRef s (Struct "named_value_int_msg") ] :->())
    , statustextSender :: forall s . Def ('[ ConstRef s (Struct "statustext_msg") ] :->())
    , debugSender :: forall s . Def ('[ ConstRef s (Struct "debug_msg") ] :->())
    }


mavlinkMessageSenders :: MavlinkSender ->  (MavlinkMessageSenders, Module)
mavlinkMessageSenders wrappedSender = (s, m)
  where
  sender :: (forall n struct . (SingI n, MavlinkSendable struct n) => Proxy struct -> SizedMavlinkSender n)
  sender _proxy = case wrappedSender of MavlinkSender unwrapped -> unwrapped
  s = MavlinkMessageSenders
    { data16Sender = mkSender (sender ( Proxy :: Proxy "data16_msg"))
    , data32Sender = mkSender (sender ( Proxy :: Proxy "data32_msg"))
    , data64Sender = mkSender (sender ( Proxy :: Proxy "data64_msg"))
    , data96Sender = mkSender (sender ( Proxy :: Proxy "data96_msg"))
    , heartbeatSender = mkSender (sender ( Proxy :: Proxy "heartbeat_msg"))
    , sysStatusSender = mkSender (sender ( Proxy :: Proxy "sys_status_msg"))
    , systemTimeSender = mkSender (sender ( Proxy :: Proxy "system_time_msg"))
    , pingSender = mkSender (sender ( Proxy :: Proxy "ping_msg"))
    , changeOperatorControlSender = mkSender (sender ( Proxy :: Proxy "change_operator_control_msg"))
    , changeOperatorControlAckSender = mkSender (sender ( Proxy :: Proxy "change_operator_control_ack_msg"))
    , authKeySender = mkSender (sender ( Proxy :: Proxy "auth_key_msg"))
    , setModeSender = mkSender (sender ( Proxy :: Proxy "set_mode_msg"))
    , paramRequestReadSender = mkSender (sender ( Proxy :: Proxy "param_request_read_msg"))
    , paramRequestListSender = mkSender (sender ( Proxy :: Proxy "param_request_list_msg"))
    , paramValueSender = mkSender (sender ( Proxy :: Proxy "param_value_msg"))
    , paramSetSender = mkSender (sender ( Proxy :: Proxy "param_set_msg"))
    , gpsRawIntSender = mkSender (sender ( Proxy :: Proxy "gps_raw_int_msg"))
    , gpsStatusSender = mkSender (sender ( Proxy :: Proxy "gps_status_msg"))
    , scaledImuSender = mkSender (sender ( Proxy :: Proxy "scaled_imu_msg"))
    , rawImuSender = mkSender (sender ( Proxy :: Proxy "raw_imu_msg"))
    , rawPressureSender = mkSender (sender ( Proxy :: Proxy "raw_pressure_msg"))
    , scaledPressureSender = mkSender (sender ( Proxy :: Proxy "scaled_pressure_msg"))
    , attitudeSender = mkSender (sender ( Proxy :: Proxy "attitude_msg"))
    , attitudeQuaternionSender = mkSender (sender ( Proxy :: Proxy "attitude_quaternion_msg"))
    , localPositionNedSender = mkSender (sender ( Proxy :: Proxy "local_position_ned_msg"))
    , globalPositionIntSender = mkSender (sender ( Proxy :: Proxy "global_position_int_msg"))
    , rcChannelsScaledSender = mkSender (sender ( Proxy :: Proxy "rc_channels_scaled_msg"))
    , rcChannelsRawSender = mkSender (sender ( Proxy :: Proxy "rc_channels_raw_msg"))
    , servoOutputRawSender = mkSender (sender ( Proxy :: Proxy "servo_output_raw_msg"))
    , missionRequestPartialListSender = mkSender (sender ( Proxy :: Proxy "mission_request_partial_list_msg"))
    , missionWritePartialListSender = mkSender (sender ( Proxy :: Proxy "mission_write_partial_list_msg"))
    , missionItemSender = mkSender (sender ( Proxy :: Proxy "mission_item_msg"))
    , missionRequestSender = mkSender (sender ( Proxy :: Proxy "mission_request_msg"))
    , missionSetCurrentSender = mkSender (sender ( Proxy :: Proxy "mission_set_current_msg"))
    , missionCurrentSender = mkSender (sender ( Proxy :: Proxy "mission_current_msg"))
    , missionRequestListSender = mkSender (sender ( Proxy :: Proxy "mission_request_list_msg"))
    , missionCountSender = mkSender (sender ( Proxy :: Proxy "mission_count_msg"))
    , missionClearAllSender = mkSender (sender ( Proxy :: Proxy "mission_clear_all_msg"))
    , missionItemReachedSender = mkSender (sender ( Proxy :: Proxy "mission_item_reached_msg"))
    , missionAckSender = mkSender (sender ( Proxy :: Proxy "mission_ack_msg"))
    , setGpsGlobalOriginSender = mkSender (sender ( Proxy :: Proxy "set_gps_global_origin_msg"))
    , gpsGlobalOriginSender = mkSender (sender ( Proxy :: Proxy "gps_global_origin_msg"))
    , setLocalPositionSetpointSender = mkSender (sender ( Proxy :: Proxy "set_local_position_setpoint_msg"))
    , localPositionSetpointSender = mkSender (sender ( Proxy :: Proxy "local_position_setpoint_msg"))
    , globalPositionSetpointIntSender = mkSender (sender ( Proxy :: Proxy "global_position_setpoint_int_msg"))
    , setGlobalPositionSetpointIntSender = mkSender (sender ( Proxy :: Proxy "set_global_position_setpoint_int_msg"))
    , safetySetAllowedAreaSender = mkSender (sender ( Proxy :: Proxy "safety_set_allowed_area_msg"))
    , safetyAllowedAreaSender = mkSender (sender ( Proxy :: Proxy "safety_allowed_area_msg"))
    , setRollPitchYawThrustSender = mkSender (sender ( Proxy :: Proxy "set_roll_pitch_yaw_thrust_msg"))
    , setRollPitchYawSpeedThrustSender = mkSender (sender ( Proxy :: Proxy "set_roll_pitch_yaw_speed_thrust_msg"))
    , rollPitchYawThrustSetpointSender = mkSender (sender ( Proxy :: Proxy "roll_pitch_yaw_thrust_setpoint_msg"))
    , rollPitchYawSpeedThrustSetpointSender = mkSender (sender ( Proxy :: Proxy "roll_pitch_yaw_speed_thrust_setpoint_msg"))
    , setQuadMotorsSetpointSender = mkSender (sender ( Proxy :: Proxy "set_quad_motors_setpoint_msg"))
    , setQuadSwarmRollPitchYawThrustSender = mkSender (sender ( Proxy :: Proxy "set_quad_swarm_roll_pitch_yaw_thrust_msg"))
    , navControllerOutputSender = mkSender (sender ( Proxy :: Proxy "nav_controller_output_msg"))
    , setQuadSwarmLedRollPitchYawThrustSender = mkSender (sender ( Proxy :: Proxy "set_quad_swarm_led_roll_pitch_yaw_thrust_msg"))
    , stateCorrectionSender = mkSender (sender ( Proxy :: Proxy "state_correction_msg"))
    , requestDataStreamSender = mkSender (sender ( Proxy :: Proxy "request_data_stream_msg"))
    , dataStreamSender = mkSender (sender ( Proxy :: Proxy "data_stream_msg"))
    , manualControlSender = mkSender (sender ( Proxy :: Proxy "manual_control_msg"))
    , rcChannelsOverrideSender = mkSender (sender ( Proxy :: Proxy "rc_channels_override_msg"))
    , vfrHudSender = mkSender (sender ( Proxy :: Proxy "vfr_hud_msg"))
    , commandLongSender = mkSender (sender ( Proxy :: Proxy "command_long_msg"))
    , commandAckSender = mkSender (sender ( Proxy :: Proxy "command_ack_msg"))
    , rollPitchYawRatesThrustSetpointSender = mkSender (sender ( Proxy :: Proxy "roll_pitch_yaw_rates_thrust_setpoint_msg"))
    , manualSetpointSender = mkSender (sender ( Proxy :: Proxy "manual_setpoint_msg"))
    , localPositionNedSystemGlobalOffsetSender = mkSender (sender ( Proxy :: Proxy "local_position_ned_system_global_offset_msg"))
    , hilStateSender = mkSender (sender ( Proxy :: Proxy "hil_state_msg"))
    , hilControlsSender = mkSender (sender ( Proxy :: Proxy "hil_controls_msg"))
    , hilRcInputsRawSender = mkSender (sender ( Proxy :: Proxy "hil_rc_inputs_raw_msg"))
    , opticalFlowSender = mkSender (sender ( Proxy :: Proxy "optical_flow_msg"))
    , globalVisionPositionEstimateSender = mkSender (sender ( Proxy :: Proxy "global_vision_position_estimate_msg"))
    , visionPositionEstimateSender = mkSender (sender ( Proxy :: Proxy "vision_position_estimate_msg"))
    , visionSpeedEstimateSender = mkSender (sender ( Proxy :: Proxy "vision_speed_estimate_msg"))
    , viconPositionEstimateSender = mkSender (sender ( Proxy :: Proxy "vicon_position_estimate_msg"))
    , highresImuSender = mkSender (sender ( Proxy :: Proxy "highres_imu_msg"))
    , fileTransferStartSender = mkSender (sender ( Proxy :: Proxy "file_transfer_start_msg"))
    , fileTransferDirListSender = mkSender (sender ( Proxy :: Proxy "file_transfer_dir_list_msg"))
    , fileTransferResSender = mkSender (sender ( Proxy :: Proxy "file_transfer_res_msg"))
    , batteryStatusSender = mkSender (sender ( Proxy :: Proxy "battery_status_msg"))
    , setpoint8dofSender = mkSender (sender ( Proxy :: Proxy "setpoint_8dof_msg"))
    , setpoint6dofSender = mkSender (sender ( Proxy :: Proxy "setpoint_6dof_msg"))
    , memoryVectSender = mkSender (sender ( Proxy :: Proxy "memory_vect_msg"))
    , debugVectSender = mkSender (sender ( Proxy :: Proxy "debug_vect_msg"))
    , namedValueFloatSender = mkSender (sender ( Proxy :: Proxy "named_value_float_msg"))
    , namedValueIntSender = mkSender (sender ( Proxy :: Proxy "named_value_int_msg"))
    , statustextSender = mkSender (sender ( Proxy :: Proxy "statustext_msg"))
    , debugSender = mkSender (sender ( Proxy :: Proxy "debug_msg"))
    }
  m = package ("mavlink_msg_senders_" ++ (senderName (sender (Proxy :: Proxy "heartbeat_msg")))) $ do
        mapM_ depend mavlinkMessageModules
        senderDeps (sender (Proxy :: Proxy "heartbeat_msg"))
        incl (data16Sender s)
        incl (data32Sender s)
        incl (data64Sender s)
        incl (data96Sender s)
        incl (heartbeatSender s)
        incl (sysStatusSender s)
        incl (systemTimeSender s)
        incl (pingSender s)
        incl (changeOperatorControlSender s)
        incl (changeOperatorControlAckSender s)
        incl (authKeySender s)
        incl (setModeSender s)
        incl (paramRequestReadSender s)
        incl (paramRequestListSender s)
        incl (paramValueSender s)
        incl (paramSetSender s)
        incl (gpsRawIntSender s)
        incl (gpsStatusSender s)
        incl (scaledImuSender s)
        incl (rawImuSender s)
        incl (rawPressureSender s)
        incl (scaledPressureSender s)
        incl (attitudeSender s)
        incl (attitudeQuaternionSender s)
        incl (localPositionNedSender s)
        incl (globalPositionIntSender s)
        incl (rcChannelsScaledSender s)
        incl (rcChannelsRawSender s)
        incl (servoOutputRawSender s)
        incl (missionRequestPartialListSender s)
        incl (missionWritePartialListSender s)
        incl (missionItemSender s)
        incl (missionRequestSender s)
        incl (missionSetCurrentSender s)
        incl (missionCurrentSender s)
        incl (missionRequestListSender s)
        incl (missionCountSender s)
        incl (missionClearAllSender s)
        incl (missionItemReachedSender s)
        incl (missionAckSender s)
        incl (setGpsGlobalOriginSender s)
        incl (gpsGlobalOriginSender s)
        incl (setLocalPositionSetpointSender s)
        incl (localPositionSetpointSender s)
        incl (globalPositionSetpointIntSender s)
        incl (setGlobalPositionSetpointIntSender s)
        incl (safetySetAllowedAreaSender s)
        incl (safetyAllowedAreaSender s)
        incl (setRollPitchYawThrustSender s)
        incl (setRollPitchYawSpeedThrustSender s)
        incl (rollPitchYawThrustSetpointSender s)
        incl (rollPitchYawSpeedThrustSetpointSender s)
        incl (setQuadMotorsSetpointSender s)
        incl (setQuadSwarmRollPitchYawThrustSender s)
        incl (navControllerOutputSender s)
        incl (setQuadSwarmLedRollPitchYawThrustSender s)
        incl (stateCorrectionSender s)
        incl (requestDataStreamSender s)
        incl (dataStreamSender s)
        incl (manualControlSender s)
        incl (rcChannelsOverrideSender s)
        incl (vfrHudSender s)
        incl (commandLongSender s)
        incl (commandAckSender s)
        incl (rollPitchYawRatesThrustSetpointSender s)
        incl (manualSetpointSender s)
        incl (localPositionNedSystemGlobalOffsetSender s)
        incl (hilStateSender s)
        incl (hilControlsSender s)
        incl (hilRcInputsRawSender s)
        incl (opticalFlowSender s)
        incl (globalVisionPositionEstimateSender s)
        incl (visionPositionEstimateSender s)
        incl (visionSpeedEstimateSender s)
        incl (viconPositionEstimateSender s)
        incl (highresImuSender s)
        incl (fileTransferStartSender s)
        incl (fileTransferDirListSender s)
        incl (fileTransferResSender s)
        incl (batteryStatusSender s)
        incl (setpoint8dofSender s)
        incl (setpoint6dofSender s)
        incl (memoryVectSender s)
        incl (debugVectSender s)
        incl (namedValueFloatSender s)
        incl (namedValueIntSender s)
        incl (statustextSender s)
        incl (debugSender s)

