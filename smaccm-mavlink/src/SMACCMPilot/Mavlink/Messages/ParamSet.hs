{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.ParamSet where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

paramSetMsgId :: Uint8
paramSetMsgId = 23

paramSetCrcExtra :: Uint8
paramSetCrcExtra = 168

paramSetModule :: Module
paramSetModule = package "mavlink_param_set_msg" $ do
  depend packModule
  incl paramSetUnpack
  defStruct (Proxy :: Proxy "param_set_msg")

[ivory|
struct param_set_msg
  { param_value :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; param_type :: Stored Uint8
  ; param_id :: Array 16 (Stored Uint8)
  }
|]

mkParamSetSender :: SizedMavlinkSender 23
                       -> Def ('[ ConstRef s (Struct "param_set_msg") ] :-> ())
mkParamSetSender sender =
  proc ("mavlink_param_set_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    paramSetPack (senderMacro sender) msg

instance MavlinkSendable "param_set_msg" 23 where
  mkSender = mkParamSetSender

paramSetPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 23
                  -> ConstRef s1 (Struct "param_set_msg")
                  -> Ivory eff ()
paramSetPack sender msg = do
  arr <- local (iarray [] :: Init (Array 23 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> param_value)
  call_ pack buf 4 =<< deref (msg ~> target_system)
  call_ pack buf 5 =<< deref (msg ~> target_component)
  call_ pack buf 22 =<< deref (msg ~> param_type)
  arrayPack buf 6 (msg ~> param_id)
  sender paramSetMsgId (constRef arr) paramSetCrcExtra
  retVoid

instance MavlinkUnpackableMsg "param_set_msg" where
    unpackMsg = ( paramSetUnpack , paramSetMsgId )

paramSetUnpack :: Def ('[ Ref s1 (Struct "param_set_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
paramSetUnpack = proc "mavlink_param_set_unpack" $ \ msg buf -> body $ do
  store (msg ~> param_value) =<< call unpack buf 0
  store (msg ~> target_system) =<< call unpack buf 4
  store (msg ~> target_component) =<< call unpack buf 5
  store (msg ~> param_type) =<< call unpack buf 22
  arrayUnpack buf 6 (msg ~> param_id)

