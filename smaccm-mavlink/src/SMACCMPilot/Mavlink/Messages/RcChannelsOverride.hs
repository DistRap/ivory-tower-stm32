{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsOverride where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

rcChannelsOverrideMsgId :: Uint8
rcChannelsOverrideMsgId = 70

rcChannelsOverrideCrcExtra :: Uint8
rcChannelsOverrideCrcExtra = 124

rcChannelsOverrideModule :: Module
rcChannelsOverrideModule = package "mavlink_rc_channels_override_msg" $ do
  depend packModule
  incl rcChannelsOverrideUnpack
  defStruct (Proxy :: Proxy "rc_channels_override_msg")

[ivory|
struct rc_channels_override_msg
  { chan1_raw :: Stored Uint16
  ; chan2_raw :: Stored Uint16
  ; chan3_raw :: Stored Uint16
  ; chan4_raw :: Stored Uint16
  ; chan5_raw :: Stored Uint16
  ; chan6_raw :: Stored Uint16
  ; chan7_raw :: Stored Uint16
  ; chan8_raw :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkRcChannelsOverrideSender :: SizedMavlinkSender 18
                       -> Def ('[ ConstRef s (Struct "rc_channels_override_msg") ] :-> ())
mkRcChannelsOverrideSender sender =
  proc ("mavlink_rc_channels_override_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    rcChannelsOverridePack (senderMacro sender) msg

instance MavlinkSendable "rc_channels_override_msg" 18 where
  mkSender = mkRcChannelsOverrideSender

rcChannelsOverridePack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 18
                  -> ConstRef s1 (Struct "rc_channels_override_msg")
                  -> Ivory eff ()
rcChannelsOverridePack sender msg = do
  arr <- local (iarray [] :: Init (Array 18 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> chan1_raw)
  call_ pack buf 2 =<< deref (msg ~> chan2_raw)
  call_ pack buf 4 =<< deref (msg ~> chan3_raw)
  call_ pack buf 6 =<< deref (msg ~> chan4_raw)
  call_ pack buf 8 =<< deref (msg ~> chan5_raw)
  call_ pack buf 10 =<< deref (msg ~> chan6_raw)
  call_ pack buf 12 =<< deref (msg ~> chan7_raw)
  call_ pack buf 14 =<< deref (msg ~> chan8_raw)
  call_ pack buf 16 =<< deref (msg ~> target_system)
  call_ pack buf 17 =<< deref (msg ~> target_component)
  sender rcChannelsOverrideMsgId (constRef arr) rcChannelsOverrideCrcExtra
  retVoid

instance MavlinkUnpackableMsg "rc_channels_override_msg" where
    unpackMsg = ( rcChannelsOverrideUnpack , rcChannelsOverrideMsgId )

rcChannelsOverrideUnpack :: Def ('[ Ref s1 (Struct "rc_channels_override_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsOverrideUnpack = proc "mavlink_rc_channels_override_unpack" $ \ msg buf -> body $ do
  store (msg ~> chan1_raw) =<< call unpack buf 0
  store (msg ~> chan2_raw) =<< call unpack buf 2
  store (msg ~> chan3_raw) =<< call unpack buf 4
  store (msg ~> chan4_raw) =<< call unpack buf 6
  store (msg ~> chan5_raw) =<< call unpack buf 8
  store (msg ~> chan6_raw) =<< call unpack buf 10
  store (msg ~> chan7_raw) =<< call unpack buf 12
  store (msg ~> chan8_raw) =<< call unpack buf 14
  store (msg ~> target_system) =<< call unpack buf 16
  store (msg ~> target_component) =<< call unpack buf 17

