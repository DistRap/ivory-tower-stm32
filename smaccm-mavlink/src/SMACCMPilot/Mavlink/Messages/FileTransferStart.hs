{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.FileTransferStart where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

fileTransferStartMsgId :: Uint8
fileTransferStartMsgId = 110

fileTransferStartCrcExtra :: Uint8
fileTransferStartCrcExtra = 235

fileTransferStartModule :: Module
fileTransferStartModule = package "mavlink_file_transfer_start_msg" $ do
  depend packModule
  incl fileTransferStartUnpack
  defStruct (Proxy :: Proxy "file_transfer_start_msg")

[ivory|
struct file_transfer_start_msg
  { transfer_uid :: Stored Uint64
  ; file_size :: Stored Uint32
  ; direction :: Stored Uint8
  ; flags :: Stored Uint8
  ; dest_path :: Array 240 (Stored Uint8)
  }
|]

mkFileTransferStartSender :: SizedMavlinkSender 254
                       -> Def ('[ ConstRef s (Struct "file_transfer_start_msg") ] :-> ())
mkFileTransferStartSender sender =
  proc ("mavlink_file_transfer_start_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    fileTransferStartPack (senderMacro sender) msg

instance MavlinkSendable "file_transfer_start_msg" 254 where
  mkSender = mkFileTransferStartSender

fileTransferStartPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 254
                  -> ConstRef s1 (Struct "file_transfer_start_msg")
                  -> Ivory eff ()
fileTransferStartPack sender msg = do
  arr <- local (iarray [] :: Init (Array 254 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> transfer_uid)
  call_ pack buf 8 =<< deref (msg ~> file_size)
  call_ pack buf 252 =<< deref (msg ~> direction)
  call_ pack buf 253 =<< deref (msg ~> flags)
  arrayPack buf 12 (msg ~> dest_path)
  sender fileTransferStartMsgId (constRef arr) fileTransferStartCrcExtra
  retVoid

instance MavlinkUnpackableMsg "file_transfer_start_msg" where
    unpackMsg = ( fileTransferStartUnpack , fileTransferStartMsgId )

fileTransferStartUnpack :: Def ('[ Ref s1 (Struct "file_transfer_start_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
fileTransferStartUnpack = proc "mavlink_file_transfer_start_unpack" $ \ msg buf -> body $ do
  store (msg ~> transfer_uid) =<< call unpack buf 0
  store (msg ~> file_size) =<< call unpack buf 8
  store (msg ~> direction) =<< call unpack buf 252
  store (msg ~> flags) =<< call unpack buf 253
  arrayUnpack buf 12 (msg ~> dest_path)

