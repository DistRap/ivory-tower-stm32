{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.NamedValueFloat where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

namedValueFloatMsgId :: Uint8
namedValueFloatMsgId = 251

namedValueFloatCrcExtra :: Uint8
namedValueFloatCrcExtra = 170

namedValueFloatModule :: Module
namedValueFloatModule = package "mavlink_named_value_float_msg" $ do
  depend packModule
  incl namedValueFloatUnpack
  defStruct (Proxy :: Proxy "named_value_float_msg")

[ivory|
struct named_value_float_msg
  { time_boot_ms :: Stored Uint32
  ; value :: Stored IFloat
  ; name :: Array 10 (Stored Uint8)
  }
|]

mkNamedValueFloatSender :: SizedMavlinkSender 18
                       -> Def ('[ ConstRef s (Struct "named_value_float_msg") ] :-> ())
mkNamedValueFloatSender sender =
  proc ("mavlink_named_value_float_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    namedValueFloatPack (senderMacro sender) msg

instance MavlinkSendable "named_value_float_msg" 18 where
  mkSender = mkNamedValueFloatSender

namedValueFloatPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 18
                  -> ConstRef s1 (Struct "named_value_float_msg")
                  -> Ivory eff ()
namedValueFloatPack sender msg = do
  arr <- local (iarray [] :: Init (Array 18 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> time_boot_ms)
  call_ pack buf 4 =<< deref (msg ~> value)
  arrayPack buf 8 (msg ~> name)
  sender namedValueFloatMsgId (constRef arr) namedValueFloatCrcExtra
  retVoid

instance MavlinkUnpackableMsg "named_value_float_msg" where
    unpackMsg = ( namedValueFloatUnpack , namedValueFloatMsgId )

namedValueFloatUnpack :: Def ('[ Ref s1 (Struct "named_value_float_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
namedValueFloatUnpack = proc "mavlink_named_value_float_unpack" $ \ msg buf -> body $ do
  store (msg ~> time_boot_ms) =<< call unpack buf 0
  store (msg ~> value) =<< call unpack buf 4
  arrayUnpack buf 8 (msg ~> name)

