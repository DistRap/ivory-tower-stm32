{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionCurrent where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

missionCurrentMsgId :: Uint8
missionCurrentMsgId = 42

missionCurrentCrcExtra :: Uint8
missionCurrentCrcExtra = 28

missionCurrentModule :: Module
missionCurrentModule = package "mavlink_mission_current_msg" $ do
  depend packModule
  incl missionCurrentUnpack
  defStruct (Proxy :: Proxy "mission_current_msg")

[ivory|
struct mission_current_msg
  { mission_current_seq :: Stored Uint16
  }
|]

mkMissionCurrentSender :: SizedMavlinkSender 2
                       -> Def ('[ ConstRef s (Struct "mission_current_msg") ] :-> ())
mkMissionCurrentSender sender =
  proc ("mavlink_mission_current_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    missionCurrentPack (senderMacro sender) msg

instance MavlinkSendable "mission_current_msg" 2 where
  mkSender = mkMissionCurrentSender

missionCurrentPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 2
                  -> ConstRef s1 (Struct "mission_current_msg")
                  -> Ivory eff ()
missionCurrentPack sender msg = do
  arr <- local (iarray [] :: Init (Array 2 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> mission_current_seq)
  sender missionCurrentMsgId (constRef arr) missionCurrentCrcExtra
  retVoid

instance MavlinkUnpackableMsg "mission_current_msg" where
    unpackMsg = ( missionCurrentUnpack , missionCurrentMsgId )

missionCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionCurrentUnpack = proc "mavlink_mission_current_unpack" $ \ msg buf -> body $ do
  store (msg ~> mission_current_seq) =<< call unpack buf 0

