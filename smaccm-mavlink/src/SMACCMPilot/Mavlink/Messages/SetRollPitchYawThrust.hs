{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavlink_ivory.py

module SMACCMPilot.Mavlink.Messages.SetRollPitchYawThrust where

import SMACCMPilot.Mavlink.Pack
import SMACCMPilot.Mavlink.Unpack
import SMACCMPilot.Mavlink.Send

import Ivory.Language

setRollPitchYawThrustMsgId :: Uint8
setRollPitchYawThrustMsgId = 56

setRollPitchYawThrustCrcExtra :: Uint8
setRollPitchYawThrustCrcExtra = 100

setRollPitchYawThrustModule :: Module
setRollPitchYawThrustModule = package "mavlink_set_roll_pitch_yaw_thrust_msg" $ do
  depend packModule
  incl setRollPitchYawThrustUnpack
  defStruct (Proxy :: Proxy "set_roll_pitch_yaw_thrust_msg")

[ivory|
struct set_roll_pitch_yaw_thrust_msg
  { roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; thrust :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkSetRollPitchYawThrustSender :: SizedMavlinkSender 18
                       -> Def ('[ ConstRef s (Struct "set_roll_pitch_yaw_thrust_msg") ] :-> ())
mkSetRollPitchYawThrustSender sender =
  proc ("mavlink_set_roll_pitch_yaw_thrust_msg_send" ++ (senderName sender)) $ \msg -> body $ do
    setRollPitchYawThrustPack (senderMacro sender) msg

instance MavlinkSendable "set_roll_pitch_yaw_thrust_msg" 18 where
  mkSender = mkSetRollPitchYawThrustSender

setRollPitchYawThrustPack :: (eff `AllocsIn` s, eff `Returns` ())
                  => SenderMacro eff s 18
                  -> ConstRef s1 (Struct "set_roll_pitch_yaw_thrust_msg")
                  -> Ivory eff ()
setRollPitchYawThrustPack sender msg = do
  arr <- local (iarray [] :: Init (Array 18 (Stored Uint8)))
  let buf = toCArray arr
  call_ pack buf 0 =<< deref (msg ~> roll)
  call_ pack buf 4 =<< deref (msg ~> pitch)
  call_ pack buf 8 =<< deref (msg ~> yaw)
  call_ pack buf 12 =<< deref (msg ~> thrust)
  call_ pack buf 16 =<< deref (msg ~> target_system)
  call_ pack buf 17 =<< deref (msg ~> target_component)
  sender setRollPitchYawThrustMsgId (constRef arr) setRollPitchYawThrustCrcExtra
  retVoid

instance MavlinkUnpackableMsg "set_roll_pitch_yaw_thrust_msg" where
    unpackMsg = ( setRollPitchYawThrustUnpack , setRollPitchYawThrustMsgId )

setRollPitchYawThrustUnpack :: Def ('[ Ref s1 (Struct "set_roll_pitch_yaw_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setRollPitchYawThrustUnpack = proc "mavlink_set_roll_pitch_yaw_thrust_unpack" $ \ msg buf -> body $ do
  store (msg ~> roll) =<< call unpack buf 0
  store (msg ~> pitch) =<< call unpack buf 4
  store (msg ~> yaw) =<< call unpack buf 8
  store (msg ~> thrust) =<< call unpack buf 12
  store (msg ~> target_system) =<< call unpack buf 16
  store (msg ~> target_component) =<< call unpack buf 17

